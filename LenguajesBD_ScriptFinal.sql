--------------------------------------------------------
--  Lenguajes de Base de Datos
--  Integrantes:
--      Fiorella Hernandez Miranda
--      Arianna Mata Retanna
--      Ricardo Vargas Montero
--      Daniel Vega Marvez
--------------------------------------------------------

--------------------------------------------------------
--  Creación de Tablespace y Usuario
--------------------------------------------------------
CREATE SMALLFILE TABLESPACE PL_TABLESPACE_FINAL 
    DATAFILE 
        'C:\ORACLE\ORCL\PL_TABLESPACE_FINAL.DBF' SIZE 104857600 AUTOEXTEND ON NEXT 52428800 MAXSIZE 1073741824 
    BLOCKSIZE 8192 
    DEFAULT NOCOMPRESS NO INMEMORY 
    ONLINE 
    SEGMENT SPACE MANAGEMENT AUTO 
    EXTENT MANAGEMENT LOCAL AUTOALLOCATE;

CREATE USER "PLENGUAJES_FINAL"
IDENTIFIED BY "PL"
DEFAULT TABLESPACE "PL_TABLESPACE_FINAL"
TEMPORARY TABLESPACE "TEMP"
ACCOUNT UNLOCK;

ALTER USER "PLENGUAJES_FINAL" QUOTA UNLIMITED ON "PL_TABLESPACE_FINAL";

GRANT "CONNECT", "RESOURCE" TO "PLENGUAJES_FINAL";
--------------------------------------------------------
--  DDL for Table AUDITORIA
--------------------------------------------------------

  CREATE TABLE "PLENGUAJES_FINAL"."AUDITORIA" 
   (	"ID_LOG" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TIPO_OPERACION" VARCHAR2(50 BYTE), 
	"TABLA" VARCHAR2(50 BYTE), 
	"EJECUTADO_POR" VARCHAR2(50 BYTE), 
	"HORA" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"   NO INMEMORY ;
--------------------------------------------------------
--  DDL for Table CLASES
--------------------------------------------------------

  CREATE TABLE "PLENGUAJES_FINAL"."CLASES" 
   (	"ID_CLASE" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(50 BYTE), 
	"DESCRIPCION" VARCHAR2(255 BYTE), 
	"CAPACIDAD" NUMBER, 
	"HORARIO" VARCHAR2(50 BYTE), 
	"ID_ENTRENADOR" NUMBER, 
	"ESTADO" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"   NO INMEMORY ;
--------------------------------------------------------
--  DDL for Table CLIENTES
--------------------------------------------------------

  CREATE TABLE "PLENGUAJES_FINAL"."CLIENTES" 
   (	"ID_CLIENTE" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(50 BYTE), 
	"APELLIDO_PATERNO" VARCHAR2(50 BYTE), 
	"APELLIDO_MATERNO" VARCHAR2(50 BYTE), 
	"EDAD" NUMBER, 
	"EMAIL" VARCHAR2(100 BYTE), 
	"TELEFONO" VARCHAR2(15 BYTE), 
	"ID_MEMBRESIA" NUMBER, 
	"ESTADO" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"   NO INMEMORY ;
--------------------------------------------------------
--  DDL for Table ENTRENADORES
--------------------------------------------------------

  CREATE TABLE "PLENGUAJES_FINAL"."ENTRENADORES" 
   (	"ID_ENTRENADOR" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(50 BYTE), 
	"APELLIDO_PATERNO" VARCHAR2(50 BYTE), 
	"APELLIDO_MATERNO" VARCHAR2(50 BYTE), 
	"ESPECIALIDAD" VARCHAR2(100 BYTE), 
	"ESTADO" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"   NO INMEMORY ;
--------------------------------------------------------
--  DDL for Table EVALUACIONES
--------------------------------------------------------

  CREATE TABLE "PLENGUAJES_FINAL"."EVALUACIONES" 
   (	"ID_EVALUACION" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PESO" NUMBER(5,2), 
	"GRASA_CORPORAL" NUMBER(5,2), 
	"MASA_MUSCULAR" NUMBER(5,2), 
	"FECHA_EVALUACION" DATE, 
	"ID_CLIENTE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"   NO INMEMORY ;
--------------------------------------------------------
--  DDL for Table INSCRIPCIONES
--------------------------------------------------------

  CREATE TABLE "PLENGUAJES_FINAL"."INSCRIPCIONES" 
   (	"ID_INSCRIPCION" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FECHA_INSCRIPCION" DATE, 
	"ID_CLIENTE" NUMBER, 
	"ID_CLASE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"   NO INMEMORY ;
--------------------------------------------------------
--  DDL for Table MEMBRESIAS
--------------------------------------------------------

  CREATE TABLE "PLENGUAJES_FINAL"."MEMBRESIAS" 
   (	"ID_MEMBRESIA" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(50 BYTE), 
	"PRECIO" NUMBER(10,2), 
	"DURACION" NUMBER, 
	"ESTADO" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"   NO INMEMORY ;
--------------------------------------------------------
--  DDL for Table PAGOS
--------------------------------------------------------

  CREATE TABLE "PLENGUAJES_FINAL"."PAGOS" 
   (	"ID_PAGO" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"MONTO" NUMBER(10,2), 
	"FECHA_PAGO" DATE, 
	"METODO_PAGO" VARCHAR2(10 BYTE), 
	"CONCEPTO" VARCHAR2(255 BYTE), 
	"ID_CLIENTE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"   NO INMEMORY ;
--------------------------------------------------------
--  DDL for Table PEDIDOPRODUCTOS
--------------------------------------------------------

  CREATE TABLE "PLENGUAJES_FINAL"."PEDIDOPRODUCTOS" 
   (	"ID_PEDIDO_PRODUCTOS" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CANTIDAD" NUMBER, 
	"ID_PEDIDO" NUMBER, 
	"ID_PRODUCTO" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"   NO INMEMORY ;
--------------------------------------------------------
--  DDL for Table PEDIDOS
--------------------------------------------------------

  CREATE TABLE "PLENGUAJES_FINAL"."PEDIDOS" 
   (	"ID_PEDIDO" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FECHA_ENTREGA" DATE, 
	"ESTADO" VARCHAR2(15 BYTE), 
	"ID_CLIENTE" NUMBER, 
	"ACTIVO" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"   NO INMEMORY ;
--------------------------------------------------------
--  DDL for Table PRODUCTOS
--------------------------------------------------------

  CREATE TABLE "PLENGUAJES_FINAL"."PRODUCTOS" 
   (	"ID_PRODUCTO" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(50 BYTE), 
	"PRECIO" NUMBER(10,2), 
	"DESCRIPCION" VARCHAR2(255 BYTE), 
	"EXISTENCIAS" NUMBER, 
	"ID_PROVEEDOR" NUMBER, 
	"ESTADO" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"   NO INMEMORY ;
--------------------------------------------------------
--  DDL for Table PROVEEDORES
--------------------------------------------------------

  CREATE TABLE "PLENGUAJES_FINAL"."PROVEEDORES" 
   (	"ID_PROVEEDOR" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(50 BYTE), 
	"TELEFONO" VARCHAR2(15 BYTE), 
	"DIRECCION" VARCHAR2(255 BYTE), 
	"ESTADO" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"   NO INMEMORY ;
--------------------------------------------------------
--  DDL for Trigger TRIGGER_AUDIT_CLASES
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_CLASES" 
AFTER INSERT OR UPDATE OR DELETE ON PLENGUAJES_FINAL.CLASES
FOR EACH ROW
DECLARE
    v_tipo_operacion VARCHAR2(50);
    v_tabla VARCHAR2(50) := 'CLASES';
    v_ejecutado_por VARCHAR2(50) := USER;
BEGIN

    IF INSERTING THEN
        v_tipo_operacion := 'INSERT';

    ELSIF UPDATING THEN
        v_tipo_operacion := 'UPDATE';

    ELSIF DELETING THEN
        v_tipo_operacion := 'DELETE';

    END IF;

    INSERT INTO PLENGUAJES_FINAL.AUDITORIA (TIPO_OPERACION, TABLA, EJECUTADO_POR)
    VALUES (v_tipo_operacion, v_tabla, v_ejecutado_por);
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_CLASES" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_AUDIT_CLIENTES
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_CLIENTES" 
AFTER INSERT OR UPDATE OR DELETE ON PLENGUAJES_FINAL.CLIENTES
FOR EACH ROW
DECLARE
    v_tipo_operacion VARCHAR2(50);
    v_tabla VARCHAR2(50) := 'CLIENTES';
    v_ejecutado_por VARCHAR2(50) := USER;
BEGIN
    IF INSERTING THEN
        v_tipo_operacion := 'INSERT';
    ELSIF UPDATING THEN
        v_tipo_operacion := 'UPDATE';
    ELSIF DELETING THEN
        v_tipo_operacion := 'DELETE';
    END IF;

    INSERT INTO PLENGUAJES_FINAL.AUDITORIA (TIPO_OPERACION, TABLA, EJECUTADO_POR)
    VALUES (v_tipo_operacion, v_tabla, v_ejecutado_por);
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_CLIENTES" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_AUDIT_ENTRENADORES
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_ENTRENADORES" 
AFTER INSERT OR UPDATE OR DELETE ON PLENGUAJES_FINAL.ENTRENADORES
FOR EACH ROW
DECLARE
    v_tipo_operacion VARCHAR2(50);
    v_tabla VARCHAR2(50) := 'ENTRENADORES';
    v_ejecutado_por VARCHAR2(50) := USER;
BEGIN
    IF INSERTING THEN
        v_tipo_operacion := 'INSERT';
    ELSIF UPDATING THEN
        v_tipo_operacion := 'UPDATE';
    ELSIF DELETING THEN
        v_tipo_operacion := 'DELETE';
    END IF;

    INSERT INTO PLENGUAJES_FINAL.AUDITORIA (TIPO_OPERACION, TABLA, EJECUTADO_POR)
    VALUES (v_tipo_operacion, v_tabla, v_ejecutado_por);
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_ENTRENADORES" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_AUDIT_EVALUACIONES
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_EVALUACIONES" 
AFTER INSERT OR UPDATE OR DELETE ON PLENGUAJES_FINAL.EVALUACIONES
FOR EACH ROW
DECLARE
    v_tipo_operacion VARCHAR2(50);
    v_tabla VARCHAR2(50) := 'EVALUACIONES';
    v_ejecutado_por VARCHAR2(50) := USER;
BEGIN
    IF INSERTING THEN
        v_tipo_operacion := 'INSERT';
    ELSIF UPDATING THEN
        v_tipo_operacion := 'UPDATE';
    ELSIF DELETING THEN
        v_tipo_operacion := 'DELETE';
    END IF;

    INSERT INTO PLENGUAJES_FINAL.AUDITORIA (TIPO_OPERACION, TABLA, EJECUTADO_POR)
    VALUES (v_tipo_operacion, v_tabla, v_ejecutado_por);
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_EVALUACIONES" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_AUDIT_INSCRIPCIONES
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_INSCRIPCIONES" 
AFTER INSERT OR UPDATE OR DELETE ON PLENGUAJES_FINAL.INSCRIPCIONES
FOR EACH ROW
DECLARE
    v_tipo_operacion VARCHAR2(50);
    v_tabla VARCHAR2(50) := 'INSCRIPCIONES';
    v_ejecutado_por VARCHAR2(50) := USER;
BEGIN
    IF INSERTING THEN
        v_tipo_operacion := 'INSERT';
    ELSIF UPDATING THEN
        v_tipo_operacion := 'UPDATE';
    ELSIF DELETING THEN
        v_tipo_operacion := 'DELETE';
    END IF;

    INSERT INTO PLENGUAJES_FINAL.AUDITORIA (TIPO_OPERACION, TABLA, EJECUTADO_POR)
    VALUES (v_tipo_operacion, v_tabla, v_ejecutado_por);
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_INSCRIPCIONES" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_AUDIT_MEMBRESIAS
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_MEMBRESIAS" 
AFTER INSERT OR UPDATE OR DELETE ON PLENGUAJES_FINAL.MEMBRESIAS
FOR EACH ROW
DECLARE
    v_tipo_operacion VARCHAR2(50);
    v_tabla VARCHAR2(50) := 'MEMBRESIAS';
    v_ejecutado_por VARCHAR2(50) := USER;
BEGIN
    IF INSERTING THEN
        v_tipo_operacion := 'INSERT';
    ELSIF UPDATING THEN
        v_tipo_operacion := 'UPDATE';
    ELSIF DELETING THEN
        v_tipo_operacion := 'DELETE';
    END IF;

    INSERT INTO PLENGUAJES_FINAL.AUDITORIA (TIPO_OPERACION, TABLA, EJECUTADO_POR)
    VALUES (v_tipo_operacion, v_tabla, v_ejecutado_por);
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_MEMBRESIAS" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_AUDIT_PAGOS
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_PAGOS" 
AFTER INSERT OR UPDATE OR DELETE ON PLENGUAJES_FINAL.PAGOS
FOR EACH ROW
DECLARE
    v_tipo_operacion VARCHAR2(50);
    v_tabla VARCHAR2(50) := 'PAGOS';
    v_ejecutado_por VARCHAR2(50) := USER;
BEGIN
    IF INSERTING THEN
        v_tipo_operacion := 'INSERT';
    ELSIF UPDATING THEN
        v_tipo_operacion := 'UPDATE';
    ELSIF DELETING THEN
        v_tipo_operacion := 'DELETE';
    END IF;

    INSERT INTO PLENGUAJES_FINAL.AUDITORIA (TIPO_OPERACION, TABLA, EJECUTADO_POR)
    VALUES (v_tipo_operacion, v_tabla, v_ejecutado_por);
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_PAGOS" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_AUDIT_PEDIDOPRODUCTOS
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_PEDIDOPRODUCTOS" 
AFTER INSERT OR UPDATE OR DELETE ON PLENGUAJES_FINAL.PEDIDOPRODUCTOS
FOR EACH ROW
DECLARE
    v_tipo_operacion VARCHAR2(50);
    v_tabla VARCHAR2(50) := 'PEDIDOPRODUCTOS';
    v_ejecutado_por VARCHAR2(50) := USER;
BEGIN
    IF INSERTING THEN
        v_tipo_operacion := 'INSERT';
    ELSIF UPDATING THEN
        v_tipo_operacion := 'UPDATE';
    ELSIF DELETING THEN
        v_tipo_operacion := 'DELETE';
    END IF;

    INSERT INTO PLENGUAJES_FINAL.AUDITORIA (TIPO_OPERACION, TABLA, EJECUTADO_POR)
    VALUES (v_tipo_operacion, v_tabla, v_ejecutado_por);
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_PEDIDOPRODUCTOS" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_AUDIT_PEDIDOS
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_PEDIDOS" 
AFTER INSERT OR UPDATE OR DELETE ON PLENGUAJES_FINAL.PEDIDOS
FOR EACH ROW
DECLARE
    v_tipo_operacion VARCHAR2(50);
    v_tabla VARCHAR2(50) := 'PEDIDOS';
    v_ejecutado_por VARCHAR2(50) := USER;
BEGIN
    IF INSERTING THEN
        v_tipo_operacion := 'INSERT';
    ELSIF UPDATING THEN
        v_tipo_operacion := 'UPDATE';
    ELSIF DELETING THEN
        v_tipo_operacion := 'DELETE';
    END IF;

    INSERT INTO PLENGUAJES_FINAL.AUDITORIA (TIPO_OPERACION, TABLA, EJECUTADO_POR)
    VALUES (v_tipo_operacion, v_tabla, v_ejecutado_por);
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_PEDIDOS" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_AUDIT_PRODUCTOS
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_PRODUCTOS" 
AFTER INSERT OR UPDATE OR DELETE ON PLENGUAJES_FINAL.PRODUCTOS
FOR EACH ROW
DECLARE
    v_tipo_operacion VARCHAR2(50);
    v_tabla VARCHAR2(50) := 'PRODUCTOS';
    v_ejecutado_por VARCHAR2(50) := USER;
BEGIN
    IF INSERTING THEN
        v_tipo_operacion := 'INSERT';
    ELSIF UPDATING THEN
        v_tipo_operacion := 'UPDATE';
    ELSIF DELETING THEN
        v_tipo_operacion := 'DELETE';
    END IF;

    INSERT INTO PLENGUAJES_FINAL.AUDITORIA (TIPO_OPERACION, TABLA, EJECUTADO_POR)
    VALUES (v_tipo_operacion, v_tabla, v_ejecutado_por);
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_PRODUCTOS" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_AUDIT_PROVEEDORES
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_PROVEEDORES" 
AFTER INSERT OR UPDATE OR DELETE ON PLENGUAJES_FINAL.PROVEEDORES
FOR EACH ROW
DECLARE
    v_tipo_operacion VARCHAR2(50);
    v_tabla VARCHAR2(50) := 'PROVEEDORES';
    v_ejecutado_por VARCHAR2(50) := USER;
BEGIN
    IF INSERTING THEN
        v_tipo_operacion := 'INSERT';
    ELSIF UPDATING THEN
        v_tipo_operacion := 'UPDATE';
    ELSIF DELETING THEN
        v_tipo_operacion := 'DELETE';
    END IF;

    INSERT INTO PLENGUAJES_FINAL.AUDITORIA (TIPO_OPERACION, TABLA, EJECUTADO_POR)
    VALUES (v_tipo_operacion, v_tabla, v_ejecutado_por);
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_AUDIT_PROVEEDORES" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_DEVOLVER_CUPO_CLASE
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_DEVOLVER_CUPO_CLASE" 
AFTER DELETE ON PLENGUAJES_FINAL.INSCRIPCIONES
FOR EACH ROW
BEGIN
    UPDATE PLENGUAJES_FINAL.CLASES
    SET CAPACIDAD = CAPACIDAD + 1
    WHERE ID_CLASE = :OLD.ID_CLASE;
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_DEVOLVER_CUPO_CLASE" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_REDUCIR_CUPO_CLASE
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_REDUCIR_CUPO_CLASE" 
BEFORE INSERT ON PLENGUAJES_FINAL.INSCRIPCIONES
FOR EACH ROW
DECLARE
    v_cupo_disponible NUMBER;
BEGIN
    SELECT CAPACIDAD
    INTO v_cupo_disponible
    FROM PLENGUAJES_FINAL.CLASES
    WHERE ID_CLASE = :NEW.ID_CLASE;

    IF v_cupo_disponible <= 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Error: No hay suficiente cupo en la clase para la inscripción.');
    END IF;

    UPDATE PLENGUAJES_FINAL.CLASES
    SET CAPACIDAD = CAPACIDAD - 1
    WHERE ID_CLASE = :NEW.ID_CLASE;
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_REDUCIR_CUPO_CLASE" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_VALIDAR_ACTUALIZACION_PEDIDO
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_VALIDAR_ACTUALIZACION_PEDIDO" 
BEFORE UPDATE ON PLENGUAJES_FINAL.PEDIDOPRODUCTOS
FOR EACH ROW
DECLARE
    v_existencias_actuales PLENGUAJES_FINAL.PRODUCTOS.existencias%TYPE;
    v_cantidad_anterior NUMBER := :OLD.cantidad;
    v_cantidad_nueva NUMBER := :NEW.cantidad;
BEGIN
    -- Obtener la cantidad de existencias actual del producto
    SELECT existencias 
    INTO v_existencias_actuales
    FROM PLENGUAJES_FINAL.PRODUCTOS
    WHERE id_producto = :OLD.id_producto;

    -- Si la cantidad nueva es mayor que la cantidad anterior
    IF v_cantidad_nueva > v_cantidad_anterior THEN
        -- Verificar si hay suficientes existencias para agregar la diferencia
        IF v_cantidad_nueva - v_cantidad_anterior > v_existencias_actuales THEN
            RAISE_APPLICATION_ERROR(-20003, 'Cantidad insuficiente en el inventario para el producto.');
        END IF;

        -- Actualizar existencias, restando la diferencia
        UPDATE PLENGUAJES_FINAL.PRODUCTOS
        SET existencias = existencias - (v_cantidad_nueva - v_cantidad_anterior)
        WHERE id_producto = :OLD.id_producto;

    -- Si la cantidad nueva es menor que la cantidad anterior
    ELSIF v_cantidad_nueva < v_cantidad_anterior THEN
        -- Reembolsar la diferencia de existencias
        UPDATE PLENGUAJES_FINAL.PRODUCTOS
        SET existencias = existencias + (v_cantidad_anterior - v_cantidad_nueva)
        WHERE id_producto = :OLD.id_producto;
    END IF;
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_VALIDAR_ACTUALIZACION_PEDIDO" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TRIGGER_VALIDAR_CANTIDAD_PEDIDO
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "PLENGUAJES_FINAL"."TRIGGER_VALIDAR_CANTIDAD_PEDIDO" 
BEFORE INSERT ON PLENGUAJES_FINAL.PEDIDOPRODUCTOS
FOR EACH ROW
DECLARE
    V_CANTIDAD_EN_INVENTARIO NUMBER;
BEGIN

    SELECT existencias 
    INTO V_CANTIDAD_EN_INVENTARIO 
    FROM PLENGUAJES_FINAL.PRODUCTOS 
    WHERE id_producto = :NEW.id_producto;

    IF :NEW.cantidad > V_CANTIDAD_EN_INVENTARIO THEN
        RAISE_APPLICATION_ERROR(-20002, 'Cantidad insuficiente en el inventario para el producto.');
    END IF;

    UPDATE PLENGUAJES_FINAL.PRODUCTOS
    SET existencias = existencias - :NEW.cantidad
    WHERE id_producto = :NEW.id_producto;
END;
/
ALTER TRIGGER "PLENGUAJES_FINAL"."TRIGGER_VALIDAR_CANTIDAD_PEDIDO" ENABLE;
--------------------------------------------------------
--  DDL for Function CANTIDAD_CLIENTES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "PLENGUAJES_FINAL"."CANTIDAD_CLIENTES" 
RETURN NUMBER
AS

    NUMCLIENTES NUMBER;

BEGIN

    SELECT COUNT(*) AS CANTIDAD
    INTO NUMCLIENTES
    FROM CLIENTES;

    RETURN numclientes;

END;


/
--------------------------------------------------------
--  DDL for Function FN_OBTENER_ID_PROVEEDOR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "PLENGUAJES_FINAL"."FN_OBTENER_ID_PROVEEDOR" (V_NOMBRE_PROVEEDOR IN VARCHAR2)
RETURN NUMBER
AS
    V_ID_PROVEEDOR NUMBER;
BEGIN
    SELECT ID_PROVEEDOR
    INTO V_ID_PROVEEDOR
    FROM PROVEEDORES
    WHERE NOMBRE = V_NOMBRE_PROVEEDOR;

    RETURN V_ID_PROVEEDOR;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN OTHERS THEN
        RETURN NULL;
END;


/
--------------------------------------------------------
--  DDL for Function OBTENER_ID_CLASE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "PLENGUAJES_FINAL"."OBTENER_ID_CLASE" (
    V_NOMBRE_CLASE IN VARCHAR2
) RETURN NUMBER
AS
    V_ID_CLASE NUMBER;
BEGIN
    SELECT ID_CLASE
    INTO V_ID_CLASE
    FROM CLASES
    WHERE NOMBRE = V_NOMBRE_CLASE;

    RETURN V_ID_CLASE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN TOO_MANY_ROWS THEN
        RETURN NULL;
END;

/
--------------------------------------------------------
--  DDL for Function OBTENER_ID_CLIENTE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "PLENGUAJES_FINAL"."OBTENER_ID_CLIENTE" (
    V_NOMBRE_CLIENTE IN VARCHAR2
) RETURN NUMBER
AS
    V_ID_CLIENTE NUMBER;
BEGIN
    SELECT ID_CLIENTE 
    INTO V_ID_CLIENTE
    FROM CLIENTES
    WHERE NOMBRE ||' '|| APELLIDO_PATERNO ||' '|| APELLIDO_MATERNO = V_NOMBRE_CLIENTE;

    RETURN V_ID_CLIENTE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN TOO_MANY_ROWS THEN
        RETURN NULL;
END;


/
--------------------------------------------------------
--  DDL for Function OBTENER_ID_ENTRENADOR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "PLENGUAJES_FINAL"."OBTENER_ID_ENTRENADOR" (
    V_NOMBRE_ENTRENADOR IN VARCHAR2
) RETURN NUMBER
AS
    V_ID_ENTRENADOR NUMBER;
BEGIN
    SELECT ID_ENTRENADOR 
    INTO V_ID_ENTRENADOR
    FROM ENTRENADORES
    WHERE NOMBRE ||' '|| APELLIDO_PATERNO ||' '|| APELLIDO_MATERNO = V_NOMBRE_ENTRENADOR;

    RETURN V_ID_ENTRENADOR;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN TOO_MANY_ROWS THEN
        RETURN NULL;
END;


/
--------------------------------------------------------
--  DDL for Function OBTENER_ID_MEMBRESIA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "PLENGUAJES_FINAL"."OBTENER_ID_MEMBRESIA" (
    V_NOMBRE_MEMBRESIA IN VARCHAR2
) RETURN NUMBER
AS
    V_ID_MEMBRESIA NUMBER;
BEGIN
    SELECT ID_MEMBRESIA
    INTO V_ID_MEMBRESIA
    FROM MEMBRESIAS
    WHERE NOMBRE = V_NOMBRE_MEMBRESIA;

    RETURN V_ID_MEMBRESIA;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN TOO_MANY_ROWS THEN
        RETURN NULL;
END;


/
--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_CLASE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ACTUALIZAR_CLASE" (
    V_ID_CLASE IN NUMBER, 
    V_NOMBRE IN VARCHAR2, 
    V_DESCRIPCION IN VARCHAR2, 
    V_CAPACIDAD IN NUMBER, 
    V_HORARIO IN VARCHAR2, 
    V_NOMBRE_ENTRENADOR IN VARCHAR2)
AS
    V_ID_ENTRENADOR NUMBER := Obtener_ID_Entrenador(V_NOMBRE_ENTRENADOR);
BEGIN
    UPDATE CLASES SET 
        NOMBRE = V_NOMBRE,
        DESCRIPCION = V_DESCRIPCION,
        CAPACIDAD = V_CAPACIDAD,
        HORARIO = V_HORARIO,
        ID_ENTRENADOR = V_ID_ENTRENADOR
    WHERE ID_CLASE = V_ID_CLASE;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'No se encontro la clase con el ID proporcionado.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar la clase: ' || SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ACTUALIZAR_CLIENTE" (
    V_ID_CLIENTE IN NUMBER, 
    V_NOMBRE IN VARCHAR2, 
    V_APELLIDO_PATERNO IN VARCHAR2, 
    V_APELLIDO_MATERNO IN VARCHAR2, 
    V_EDAD IN NUMBER, 
    V_EMAIL IN VARCHAR2, 
    V_TELEFONO IN VARCHAR2, 
    V_NOMBRE_MEMBRESIA IN VARCHAR2)
AS
    V_ID_MEMBRESIA NUMBER := Obtener_ID_Membresia(V_NOMBRE_MEMBRESIA);
BEGIN
    UPDATE CLIENTES SET 
    NOMBRE = V_NOMBRE,
    APELLIDO_PATERNO = V_APELLIDO_PATERNO,
    APELLIDO_MATERNO = V_APELLIDO_MATERNO,
    EDAD = V_EDAD,
    EMAIL = V_EMAIL,
    TELEFONO = V_TELEFONO,
    ID_MEMBRESIA = V_ID_MEMBRESIA
    WHERE ID_CLIENTE = V_ID_CLIENTE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'No se encontró el cliente con el ID proporcionado.');
    WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar el cliente: ' || SQLERRM);
END;


/
--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_ENTRENADOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ACTUALIZAR_ENTRENADOR" (
    V_ID_ENTRENADOR IN NUMBER, 
    V_NOMBRE IN VARCHAR2, 
    V_APELLIDO_PATERNO IN VARCHAR2, 
    V_APELLIDO_MATERNO IN VARCHAR2, 
    V_ESPECIALIDAD IN VARCHAR2)
AS
BEGIN
    UPDATE ENTRENADORES SET 
        NOMBRE = V_NOMBRE,
        APELLIDO_PATERNO = V_APELLIDO_PATERNO,
        APELLIDO_MATERNO = V_APELLIDO_MATERNO,
        ESPECIALIDAD = V_ESPECIALIDAD
    WHERE ID_ENTRENADOR = V_ID_ENTRENADOR;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'No se encontro el entrenador con el ID proporcionado.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar el entrenador: ' || SQLERRM);
END;


/
--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_EVALUACION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ACTUALIZAR_EVALUACION" (
    V_ID_EVALUACION IN NUMBER, 
    V_PESO IN NUMBER, 
    V_GRASA_CORPORAL IN NUMBER, 
    V_MASA_MUSCULAR IN NUMBER, 
    V_FECHA_EVALUACION IN DATE, 
    V_NOMBRE_CLIENTE IN VARCHAR2)
AS
    V_ID_CLIENTE NUMBER := Obtener_ID_Cliente(V_NOMBRE_CLIENTE);
BEGIN
    UPDATE EVALUACIONES SET 
    PESO = V_PESO,
    GRASA_CORPORAL = V_GRASA_CORPORAL,
    MASA_MUSCULAR = V_MASA_MUSCULAR,
    FECHA_EVALUACION = V_FECHA_EVALUACION,
    ID_CLIENTE = V_ID_CLIENTE
    WHERE ID_EVALUACION = V_ID_EVALUACION;
    COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'No se encontró el cliente con el ID proporcionado.');
    WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar el cliente: ' || SQLERRM);
END;


/
--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_PAGO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ACTUALIZAR_PAGO" (
    V_ID_PAGO IN NUMBER, 
    V_MONTO IN NUMBER, 
    V_FECHA_PAGO IN DATE, 
    V_METODO_PAGO IN VARCHAR2, 
    V_CONCEPTO IN VARCHAR2, 
    V_NOMBRE_CLIENTE IN VARCHAR2)
AS
    V_ID_CLIENTE NUMBER := Obtener_ID_Cliente(V_NOMBRE_CLIENTE);
BEGIN
    UPDATE PAGOS SET 
    MONTO = V_MONTO,
    FECHA_PAGO = V_FECHA_PAGO,
    METODO_PAGO = V_METODO_PAGO,
    CONCEPTO = V_CONCEPTO,
    ID_CLIENTE = V_ID_CLIENTE
    WHERE ID_PAGO = V_ID_PAGO;
    COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'No se encontró el cliente con el ID proporcionado.');
    WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar el cliente: ' || SQLERRM);
END;


/
--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_PEDIDO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ACTUALIZAR_PEDIDO" (PID IN NUMBER, PFECHA IN DATE,
    PPRODUCTO IN VARCHAR2, PESTADO IN VARCHAR2, PCANTIDAD IN NUMBER)
AS
V_ID_PRODUCTO NUMBER;
BEGIN
    UPDATE PEDIDOS
    SET FECHA_ENTREGA = PFECHA, ESTADO = PESTADO
    WHERE ID_PEDIDO = PID;

    SELECT ID_PRODUCTO INTO V_ID_PRODUCTO
    FROM PRODUCTOS
    WHERE NOMBRE = PPRODUCTO;

    UPDATE PEDIDOPRODUCTOS
    SET CANTIDAD = PCANTIDAD, ID_PRODUCTO = V_ID_PRODUCTO
    WHERE ID_PEDIDO = PID;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'No se encontro el pedido con el ID proporcionado.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar el pedido: ' || SQLERRM); 
END;


/
--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_PROVEEDOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ACTUALIZAR_PROVEEDOR" (PID IN NUMBER, PNOMBRE IN VARCHAR2, PTELEFONO IN VARCHAR2, PDIRECCION IN VARCHAR2)
AS
BEGIN
    UPDATE PROVEEDORES
    SET NOMBRE = PNOMBRE, TELEFONO = PTELEFONO, DIRECCION = PDIRECCION
    WHERE ID_PROVEEDOR = PID;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'No se encontro el proveedor con el ID proporcionado.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar el entrenador: ' || SQLERRM); 
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_CLASE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ELIMINAR_CLASE" (ID_CLASE IN NUMBER)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'UPDATE CLASES SET ESTADO = 0 WHERE ID_CLASE = :P1';
    EXECUTE IMMEDIATE VSQL USING ID_CLASE;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ELIMINAR_CLIENTE" (ID_CLIENTE IN NUMBER)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'UPDATE CLIENTES SET ESTADO = 0
             WHERE ID_CLIENTE = :P1';
    EXECUTE IMMEDIATE VSQL USING ID_CLIENTE;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_ENTRENADOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ELIMINAR_ENTRENADOR" (ID_ENTRENADOR IN NUMBER)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'UPDATE ENTRENADORES SET ESTADO = 0 WHERE ID_ENTRENADOR = :P1';
    EXECUTE IMMEDIATE VSQL USING ID_ENTRENADOR;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_EVALUACION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ELIMINAR_EVALUACION" (ID_EVALUACION IN NUMBER)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'DELETE FROM EVALUACIONES
             WHERE ID_EVALUACION = :P1';
    EXECUTE IMMEDIATE VSQL USING ID_EVALUACION;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_PAGO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ELIMINAR_PAGO" (ID_PAGO IN NUMBER)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'DELETE FROM PAGOS
             WHERE ID_PAGO = :P1';
    EXECUTE IMMEDIATE VSQL USING ID_PAGO;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_PEDIDO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ELIMINAR_PEDIDO" (PID IN NUMBER)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'UPDATE PEDIDOS SET ACTIVO = 0 WHERE ID_PEDIDO = :P1';
    EXECUTE IMMEDIATE VSQL USING PID;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_PROVEEDOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."ELIMINAR_PROVEEDOR" (PID IN NUMBER)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'UPDATE PROVEEDORES SET ESTADO = 0 WHERE ID_PROVEEDOR = :P1';
    EXECUTE IMMEDIATE VSQL USING PID;
END;


/
--------------------------------------------------------
--  DDL for Procedure INGRESAR_CLASES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."INGRESAR_CLASES" (
    V_NOMBRE IN VARCHAR2, 
    V_DESCRIPCION IN VARCHAR2, 
    V_CAPACIDAD IN NUMBER, 
    V_HORARIO IN VARCHAR2, 
    V_NOMBRE_ENTRENADOR IN VARCHAR2)
AS
    V_ID_ENTRENADOR NUMBER := Obtener_ID_Entrenador(V_NOMBRE_ENTRENADOR);
BEGIN
    INSERT INTO CLASES (NOMBRE, DESCRIPCION, CAPACIDAD, HORARIO, ID_ENTRENADOR, ESTADO)
    VALUES (V_NOMBRE, V_DESCRIPCION, V_CAPACIDAD, V_HORARIO, V_ID_ENTRENADOR, 1);

    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-20004, 'Violacion de clave unica al ingresar la clase. Verifique los datos proporcionados.');
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20005, 'Error de conversion al insertar la clase. Verifique los datos proporcionados.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20006, 'Error desconocido al ingresar la clase: ' || SQLERRM);
END;


/
--------------------------------------------------------
--  DDL for Procedure INGRESAR_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."INGRESAR_CLIENTE" (
    V_NOMBRE IN VARCHAR2, 
    V_APELLIDO_PATERNO IN VARCHAR2, 
    V_APELLIDO_MATERNO IN VARCHAR2, 
    V_EDAD IN NUMBER, 
    V_EMAIL IN VARCHAR2, 
    V_TELEFONO IN VARCHAR2, 
    V_NOMBRE_MEMBRESIA IN VARCHAR2)
AS
    V_ID_MEMBRESIA NUMBER := Obtener_ID_Membresia(V_NOMBRE_MEMBRESIA);
BEGIN
    INSERT INTO CLIENTES (NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO, EDAD, EMAIL, TELEFONO, ID_MEMBRESIA, ESTADO)
    VALUES (V_NOMBRE, V_APELLIDO_PATERNO, V_APELLIDO_MATERNO, V_EDAD, V_EMAIL, V_TELEFONO, V_ID_MEMBRESIA, 1);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-20004, 'Violación de clave única al ingresar el cliente. Verifique los datos proporcionados.');
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20005, 'Error de conversión al insertar el cliente. Verifique los datos proporcionados.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20006, 'Error desconocido al ingresar el cliente: ' || SQLERRM);
END;


/
--------------------------------------------------------
--  DDL for Procedure INGRESAR_ENTRENADOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."INGRESAR_ENTRENADOR" (
    V_NOMBRE IN VARCHAR2, 
    V_APELLIDO_PATERNO IN VARCHAR2, 
    V_APELLIDO_MATERNO IN VARCHAR2, 
    V_ESPECIALIDAD IN VARCHAR2)
AS
BEGIN
    INSERT INTO ENTRENADORES (NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO, ESPECIALIDAD)
    VALUES (V_NOMBRE, V_APELLIDO_PATERNO, V_APELLIDO_MATERNO, V_ESPECIALIDAD);

    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-20011, 'Violacion de clave unica al ingresar el entrenador. Verifique los datos proporcionados.');
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20012, 'Error de conversion al insertar el entrenador. Verifique los datos proporcionados.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20013, 'Error desconocido al ingresar el entrenador: ' || SQLERRM);
END;


/
--------------------------------------------------------
--  DDL for Procedure INGRESAR_EVALUACION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."INGRESAR_EVALUACION" (
    V_PESO IN NUMBER, 
    V_GRASA_CORPORAL IN NUMBER, 
    V_MASA_MUSCULAR IN NUMBER, 
    V_FECHA_EVALUACION IN DATE, 
    V_NOMBRE_CLIENTE IN VARCHAR2)
AS
    V_ID_CLIENTE NUMBER := Obtener_ID_Cliente(V_NOMBRE_CLIENTE);
BEGIN
        INSERT INTO EVALUACIONES (PESO, GRASA_CORPORAL, MASA_MUSCULAR, FECHA_EVALUACION, ID_CLIENTE)
        VALUES (V_PESO, V_GRASA_CORPORAL, V_MASA_MUSCULAR, V_FECHA_EVALUACION, V_ID_CLIENTE);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
    RAISE_APPLICATION_ERROR(-20004, 'Violación de clave única al ingresar la evaluación. Verifique los datos proporcionados: ' || SQLERRM);
WHEN VALUE_ERROR THEN
    RAISE_APPLICATION_ERROR(-20005, 'Error de conversión al insertar la evaluación. Verifique los datos proporcionados.');
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20006, 'Error desconocido al ingresar la evaluación: ' || SQLERRM);
END;


/
--------------------------------------------------------
--  DDL for Procedure INGRESAR_PAGO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."INGRESAR_PAGO" (
    V_MONTO IN NUMBER, 
    V_FECHA_PAGO IN DATE, 
    V_METODO_PAGO IN VARCHAR2, 
    V_CONCEPTO IN VARCHAR2, 
    V_NOMBRE_CLIENTE IN VARCHAR2)
AS
    V_ID_CLIENTE NUMBER;
BEGIN

    SELECT ID_CLIENTE 
    INTO V_ID_CLIENTE
    FROM CLIENTES
    WHERE NOMBRE ||' '|| APELLIDO_PATERNO ||' '|| APELLIDO_MATERNO = V_NOMBRE_CLIENTE;

    INSERT INTO PAGOS (MONTO, FECHA_PAGO, METODO_PAGO, CONCEPTO, ID_CLIENTE)
    VALUES (V_MONTO, V_FECHA_PAGO, V_METODO_PAGO, V_CONCEPTO, V_ID_CLIENTE);
    COMMIT;
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
    RAISE_APPLICATION_ERROR(-20004, 'Violación de clave única al ingresar la evaluación. Verifique los datos proporcionados: ' || SQLERRM);
WHEN VALUE_ERROR THEN
    RAISE_APPLICATION_ERROR(-20005, 'Error de conversión al insertar la evaluación. Verifique los datos proporcionados.');
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20006, 'Error desconocido al ingresar la evaluación: ' || SQLERRM);
END;


/
--------------------------------------------------------
--  DDL for Procedure INGRESAR_PEDIDO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."INGRESAR_PEDIDO" (PFECHA IN DATE,
    PESTADO IN VARCHAR2, PCLIENTE IN VARCHAR2, PCANTIDAD IN NUMBER, PPRODUCTO IN VARCHAR2)
AS 
   V_ID_CLIENTE NUMBER;
   V_ID_PRODUCTO NUMBER;
   V_ID_PEDIDO NUMBER;
BEGIN
    SELECT ID_CLIENTE INTO V_ID_CLIENTE 
    FROM CLIENTES
    WHERE NOMBRE ||' '|| APELLIDO_PATERNO ||' '|| APELLIDO_MATERNO = PCLIENTE;

    INSERT INTO PEDIDOS(FECHA_ENTREGA, ESTADO, ID_CLIENTE)
    VALUES (PFECHA, PESTADO, V_ID_CLIENTE)
    RETURNING ID_PEDIDO INTO V_ID_PEDIDO;

    SELECT ID_PRODUCTO INTO V_ID_PRODUCTO 
    FROM PRODUCTOS
    WHERE NOMBRE = PPRODUCTO;

    INSERT INTO PEDIDOPRODUCTOS(CANTIDAD, ID_PEDIDO, ID_PRODUCTO)
    VALUES(PCANTIDAD, V_ID_PEDIDO, V_ID_PRODUCTO);

    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-20011, 'Violacion de clave unica al ingresar el pedido. Verifique los datos proporcionados.');
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20012, 'Error de conversion al insertar el pedido. Verifique los datos proporcionados.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20013, 'Error desconocido al ingresar el pedido: ' || SQLERRM);
END;


/
--------------------------------------------------------
--  DDL for Procedure INGRESAR_PROVEEDOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."INGRESAR_PROVEEDOR" (PNOMBRE IN VARCHAR2, PTELEFONO IN VARCHAR2, PDIRECCION IN VARCHAR2)
AS
BEGIN
    INSERT INTO PROVEEDORES(NOMBRE, TELEFONO, DIRECCION)
    VALUES(PNOMBRE, PTELEFONO, PDIRECCION);

    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-20011, 'Violacion de clave unica al ingresar el proveedor. Verifique los datos proporcionados.');
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20012, 'Error de conversion al insertar el proveedor. Verifique los datos proporcionados.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20013, 'Error desconocido al ingresar el proveedor: ' || SQLERRM);
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_CLASES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_CLASES" (DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'SELECT 
        C.ID_CLASE,
        C.NOMBRE,
        C.DESCRIPCION,
        C.CAPACIDAD,
        C.HORARIO,
        E.NOMBRE || '' '' || E.APELLIDO_PATERNO || '' '' || E.APELLIDO_MATERNO AS NOMBRE_COMPLETO
    FROM CLASES C
    INNER JOIN ENTRENADORES E ON E.ID_ENTRENADOR = C.ID_ENTRENADOR
    WHERE C.ESTADO = 1 
      AND E.ESTADO = 1
      AND C.CAPACIDAD > 0
    ORDER BY C.ID_CLASE ASC';

    OPEN DATOS FOR VSQL;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_CLASE_POR_ID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_CLASE_POR_ID" (ID_CLASE IN NUMBER, DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'SELECT 
        C.ID_CLASE,
        C.NOMBRE,
        C.DESCRIPCION,
        C.CAPACIDAD,
        C.HORARIO,
        E.NOMBRE || '' '' || E.APELLIDO_PATERNO || '' '' || E.APELLIDO_MATERNO AS NOMBRE_COMPLETO
    FROM CLASES C
    INNER JOIN ENTRENADORES E ON E.ID_ENTRENADOR = C.ID_ENTRENADOR
    WHERE C.ID_CLASE = :P1 
      AND C.ESTADO = 1 
      AND E.ESTADO = 1';

    OPEN DATOS FOR VSQL USING ID_CLASE;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_CLIENTES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_CLIENTES" (DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'SELECT 
    C.ID_CLIENTE,
    C.NOMBRE,
    C.APELLIDO_PATERNO,
    C.APELLIDO_MATERNO,
    C.EDAD,
    C.EMAIL,
    C.TELEFONO,
    M.NOMBRE AS Nombre_Membresia
    FROM CLIENTES C
    INNER JOIN Membresias M ON M.ID_MEMBRESIA = C.ID_MEMBRESIA
    WHERE C.ESTADO = 1
    ORDER BY C.ID_CLIENTE ASC';
    OPEN DATOS FOR VSQL;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_CLIENTES_PAGOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_CLIENTES_PAGOS" (DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'SELECT 
    ID_CLIENTE,
    NOMBRE || '' '' || APELLIDO_PATERNO || '' '' || APELLIDO_MATERNO AS NOMBRE_COMPLETO
    FROM CLIENTES
    WHERE ESTADO = 1
    ORDER BY ID_CLIENTE ASC';

    OPEN DATOS FOR VSQL;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_CLIENTE_POR_ID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_CLIENTE_POR_ID" (ID_CLIENTE IN NUMBER, DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'SELECT 
    C.ID_CLIENTE,
    C.NOMBRE,
    C.APELLIDO_PATERNO,
    C.APELLIDO_MATERNO,
    C.EDAD,
    C.EMAIL,
    C.TELEFONO,
    M.NOMBRE AS Nombre_Membresia
    FROM CLIENTES C
    INNER JOIN Membresias M ON M.ID_MEMBRESIA = C.ID_MEMBRESIA
    WHERE C.ID_CLIENTE = :P1';
    OPEN DATOS FOR VSQL USING ID_CLIENTE;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_ENTRENADORES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_ENTRENADORES" (DATOS OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN DATOS FOR
        SELECT 
            ID_ENTRENADOR,
            NOMBRE,
            APELLIDO_PATERNO,
            APELLIDO_MATERNO,
            ESPECIALIDAD
        FROM ENTRENADORES
        WHERE ESTADO = 1
        ORDER BY ID_ENTRENADOR ASC;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_ENTRENADOR_POR_ID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_ENTRENADOR_POR_ID" (V_ID_ENTRENADOR IN NUMBER, DATOS OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN DATOS FOR
        SELECT 
            ID_ENTRENADOR,
            NOMBRE,
            APELLIDO_PATERNO,
            APELLIDO_MATERNO,
            ESPECIALIDAD
        FROM ENTRENADORES
        WHERE ID_ENTRENADOR = V_ID_ENTRENADOR;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_EVALUACIONES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_EVALUACIONES" (DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'SELECT 
    E.ID_EVALUACION,
    E.PESO,
    E.GRASA_CORPORAL,
    E.MASA_MUSCULAR,
    E.FECHA_EVALUACION,
    C.ID_CLIENTE,
    C.NOMBRE || '' '' || C.APELLIDO_PATERNO || '' '' || C.APELLIDO_MATERNO AS Nombre_Cliente
    FROM EVALUACIONES E
    INNER JOIN CLIENTES C ON C.ID_CLIENTE = E.ID_CLIENTE
    WHERE C.ESTADO = 1
    ORDER BY E.ID_EVALUACION ASC';

    OPEN DATOS FOR VSQL;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_EVALUACION_POR_ID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_EVALUACION_POR_ID" (ID_EVALUACION IN NUMBER, DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'SELECT 
    E.ID_EVALUACION,
    E.PESO,
    E.GRASA_CORPORAL,
    E.MASA_MUSCULAR,
    E.FECHA_EVALUACION,
    C.ID_CLIENTE,
    C.NOMBRE || '' '' || C.APELLIDO_PATERNO || '' '' || C.APELLIDO_MATERNO AS Nombre_Cliente
    FROM EVALUACIONES E
    INNER JOIN CLIENTES C ON C.ID_CLIENTE = E.ID_CLIENTE
    WHERE E.ID_EVALUACION = :P1';
    OPEN DATOS FOR VSQL USING ID_EVALUACION;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_MEMBRESIAS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_MEMBRESIAS" (DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'SELECT 
    ID_MEMBRESIA,
    NOMBRE,
    PRECIO,
    DURACION
    FROM MEMBRESIAS
    WHERE ESTADO = 1
    ORDER BY ID_MEMBRESIA ASC';
    OPEN DATOS FOR VSQL;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_NOMBRES_CLIENTES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_NOMBRES_CLIENTES" (DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'SELECT 
    ID_CLIENTE,
    NOMBRE || '' '' || APELLIDO_PATERNO || '' '' || APELLIDO_MATERNO AS NOMBRE_COMPLETO
    FROM CLIENTES
    WHERE ESTADO = 1
    ORDER BY ID_CLIENTE ASC';

    OPEN DATOS FOR VSQL;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_NOMBRES_ENTRENADORES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_NOMBRES_ENTRENADORES" (DATOS OUT SYS_REFCURSOR) 
AS
BEGIN
    OPEN DATOS FOR
        SELECT 
            NOMBRE || ' ' || APELLIDO_PATERNO || ' ' || APELLIDO_MATERNO AS NOMBRE_COMPLETO
        FROM ENTRENADORES
        WHERE ESTADO = 1;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_NOMBRE_CLIENTES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_NOMBRE_CLIENTES" (DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := '
    SELECT NOMBRE || '' '' || APELLIDO_PATERNO || '' '' || APELLIDO_MATERNO AS NOMBRE_CLIENTE
    FROM CLIENTES
    WHERE ESTADO = 1
    ORDER BY ID_CLIENTE ASC';
    OPEN DATOS FOR VSQL;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_NOMBRE_PRODUCTOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_NOMBRE_PRODUCTOS" (DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := '
    SELECT ID_PRODUCTO, NOMBRE
    FROM PRODUCTOS
    WHERE ESTADO = 1
    AND EXISTENCIAS > 0
    ORDER BY ID_PRODUCTO ASC';
    OPEN DATOS FOR VSQL;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_PAGOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_PAGOS" (DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'SELECT 
    P.ID_PAGO,
    P.MONTO,
    P.FECHA_PAGO,
    P.METODO_PAGO,
    P.CONCEPTO,
    C.ID_CLIENTE,
    C.NOMBRE || '' '' || C.APELLIDO_PATERNO || '' '' || C.APELLIDO_MATERNO AS Nombre_Cliente
    FROM PAGOS P
    INNER JOIN CLIENTES C ON C.ID_CLIENTE = P.ID_CLIENTE
    WHERE C.ESTADO = 1
    ORDER BY P.ID_PAGO ASC';

    OPEN DATOS FOR VSQL;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_PAGO_POR_ID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_PAGO_POR_ID" (ID_PAGO IN NUMBER, DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'SELECT 
    P.ID_PAGO,
    P.MONTO,
    P.FECHA_PAGO,
    P.METODO_PAGO,
    P.CONCEPTO,
    C.ID_CLIENTE,
    C.NOMBRE || '' '' || C.APELLIDO_PATERNO || '' '' || C.APELLIDO_MATERNO AS Nombre_Cliente
    FROM PAGOS P
    INNER JOIN CLIENTES C ON C.ID_CLIENTE = P.ID_CLIENTE
    WHERE P.ID_PAGO = :P1';
    OPEN DATOS FOR VSQL USING ID_PAGO;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_PEDIDOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_PEDIDOS" (DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := '
    SELECT P.ID_PEDIDO, P.FECHA_ENTREGA, P.ESTADO, PR.NOMBRE, PP.CANTIDAD, 
           C.NOMBRE || '' '' || C.APELLIDO_PATERNO || '' '' || C.APELLIDO_MATERNO AS CLIENTE
    FROM PEDIDOS P
    JOIN PEDIDOPRODUCTOS PP ON P.ID_PEDIDO = PP.ID_PEDIDO
    JOIN PRODUCTOS PR ON PP.ID_PRODUCTO = PR.ID_PRODUCTO
    JOIN CLIENTES C ON P.ID_CLIENTE = C.ID_CLIENTE
    WHERE P.ACTIVO = 1
    ORDER BY P.ID_PEDIDO ASC';
    OPEN DATOS FOR VSQL;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_PEDIDO_POR_ID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_PEDIDO_POR_ID" (PID IN NUMBER, DATOS OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN DATOS FOR 
    SELECT P.FECHA_ENTREGA, P.ESTADO, PP.CANTIDAD, PR.NOMBRE
    FROM PEDIDOS P
    JOIN PEDIDOPRODUCTOS PP ON P.ID_PEDIDO = PP.ID_PEDIDO
    JOIN PRODUCTOS PR ON PP.ID_PRODUCTO = PR.ID_PRODUCTO
    WHERE P.ID_PEDIDO = PID;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_PROVEEDORES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_PROVEEDORES" (DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := '
    SELECT ID_PROVEEDOR, NOMBRE, TELEFONO, DIRECCION
    FROM PROVEEDORES
    WHERE ESTADO = 1
    ORDER BY ID_PROVEEDOR ASC';
    OPEN DATOS FOR VSQL;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_PROVEEDOR_POR_ID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."OBTENER_PROVEEDOR_POR_ID" (PID IN NUMBER, DATOS OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN DATOS FOR 
    SELECT ID_PROVEEDOR, NOMBRE, TELEFONO, DIRECCION
    FROM PROVEEDORES
    WHERE ID_PROVEEDOR = PID;
END;


/
--------------------------------------------------------
--  DDL for Procedure SP_CREAR_MEMBRESIAS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_CREAR_MEMBRESIAS" (
    V_NOMBRE IN VARCHAR2, 
    V_PRECIO IN NUMBER, 
    V_DURACION IN NUMBER)
AS
    VCOD NUMBER;
    VMENS VARCHAR2(500);
BEGIN
    INSERT INTO MEMBRESIAS (NOMBRE, PRECIO, DURACION, ESTADO)
    VALUES (V_NOMBRE, V_PRECIO, V_DURACION, 1);
commit;
EXCEPTION
    WHEN OTHERS THEN  
        VCOD := SQLCODE;
        VMENS := SQLERRM;
        DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error al crear la membresía: ' || VCOD || ' ' || VMENS || '* ');
END;


/
--------------------------------------------------------
--  DDL for Procedure SP_CREAR_PRODUCTOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_CREAR_PRODUCTOS" (
    V_NOMBRE IN VARCHAR2, 
    V_PRECIO IN NUMBER, 
    V_DESCRIPCION IN VARCHAR2, 
    V_EXISTENCIAS IN NUMBER, 
    V_NOMBRE_PROVEEDOR IN VARCHAR2)
AS
    V_ID_PROVEEDOR NUMBER;
    VCOD NUMBER;
    VMENS VARCHAR2(500);
BEGIN
    V_ID_PROVEEDOR := FN_Obtener_ID_Proveedor(V_NOMBRE_PROVEEDOR);

    IF V_ID_PROVEEDOR IS NOT NULL THEN
        INSERT INTO PRODUCTOS (NOMBRE, PRECIO, DESCRIPCION, EXISTENCIAS, ID_PROVEEDOR, ESTADO)
        VALUES (V_NOMBRE, V_PRECIO, V_DESCRIPCION, V_EXISTENCIAS, V_ID_PROVEEDOR, 1);
    END IF;
commit;    
EXCEPTION
    WHEN OTHERS THEN  
        VCOD := SQLCODE;
        VMENS := SQLERRM;
        DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error:' || VCOD || ' ' ||  VMENS||'* ');
END;


/
--------------------------------------------------------
--  DDL for Procedure SP_EDITAR_MEMBRESIAS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_EDITAR_MEMBRESIAS" (
    V_ID_MEMBRESIA IN NUMBER, 
    V_NOMBRE IN VARCHAR2, 
    V_PRECIO IN NUMBER, 
    V_DURACION IN NUMBER)
AS
    VCOD NUMBER;
    VMENS VARCHAR2(500);
BEGIN
    UPDATE MEMBRESIAS SET 
    NOMBRE = V_NOMBRE,
    PRECIO = V_PRECIO,
    DURACION = V_DURACION
    WHERE ID_MEMBRESIA = V_ID_MEMBRESIA;
commit;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE(' *No se encontró ninguna membresía con el ID proporcionado* ');
    WHEN OTHERS THEN  
        VCOD := SQLCODE;
        VMENS := SQLERRM;
        DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error al editar la membresía: ' || VCOD || ' ' || VMENS || '* ');
END;


/
--------------------------------------------------------
--  DDL for Procedure SP_EDITAR_PRODUCTOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_EDITAR_PRODUCTOS" (
    V_ID_PRODUCTO IN NUMBER, 
    V_NOMBRE IN VARCHAR2, 
    V_PRECIO IN NUMBER, 
    V_DESCRIPCION IN VARCHAR2, 
    V_EXISTENCIAS IN NUMBER, 
    V_NOMBRE_PROVEEDOR IN VARCHAR2)
AS
    V_ID_PROVEEDOR NUMBER;
    VCOD NUMBER;
    VMENS VARCHAR2(500);
BEGIN
    V_ID_PROVEEDOR := FN_Obtener_ID_Proveedor(V_NOMBRE_PROVEEDOR);

    IF V_ID_PROVEEDOR IS NOT NULL THEN
        UPDATE PRODUCTOS SET 
        NOMBRE = V_NOMBRE,
        PRECIO = V_PRECIO,
        DESCRIPCION = V_DESCRIPCION,
        EXISTENCIAS = V_EXISTENCIAS,
        ID_PROVEEDOR = V_ID_PROVEEDOR
        WHERE ID_PRODUCTO = V_ID_PRODUCTO;
    END IF;
commit;    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE(' *No se encontró ningún producto con el ID proporcionado* ');
    WHEN OTHERS THEN  
        VCOD := SQLCODE;
        VMENS := SQLERRM;
        DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error:' || VCOD || ' ' ||  VMENS||'* ');
END;


/
--------------------------------------------------------
--  DDL for Procedure SP_ELIMINAR_INSCRIPCION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_ELIMINAR_INSCRIPCION" (ID_INSCRIPCION IN NUMBER)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'DELETE FROM INSCRIPCIONES
             WHERE ID_INSCRIPCION = :P1';
    EXECUTE IMMEDIATE VSQL USING ID_INSCRIPCION;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error: No se encontró la inscripción con el ID proporcionado.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error: Ocurrió un error inesperado al eliminar la inscripción.');
END SP_Eliminar_Inscripcion;


/
--------------------------------------------------------
--  DDL for Procedure SP_ELIMINAR_MEMBRESIAS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_ELIMINAR_MEMBRESIAS" (ID_MEMBRESIA IN NUMBER)
AS
    VSQL VARCHAR2(2000);
    VCOD NUMBER;
    VMENS VARCHAR2(500);
BEGIN
    VSQL := 'UPDATE MEMBRESIAS SET ESTADO = 0
             WHERE ID_MEMBRESIA = :P1';
    EXECUTE IMMEDIATE VSQL USING ID_MEMBRESIA;

EXCEPTION
    WHEN OTHERS THEN  
        VCOD := SQLCODE;
        VMENS := SQLERRM;
        DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error al eliminar la membresía: ' || VCOD || ' ' || VMENS || '* ');
END;


/
--------------------------------------------------------
--  DDL for Procedure SP_ELIMINAR_PRODUCTOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_ELIMINAR_PRODUCTOS" (ID_PRODUCTO IN NUMBER)
AS
    VSQL VARCHAR2(2000);
    VCOD NUMBER;
    VMENS VARCHAR2(500);
BEGIN
    VSQL := 'UPDATE PRODUCTOS SET ESTADO = 0
             WHERE ID_PRODUCTO = :P1';
    EXECUTE IMMEDIATE VSQL USING ID_PRODUCTO;

EXCEPTION
    WHEN OTHERS THEN  
        VCOD := SQLCODE;
        VMENS := SQLERRM;
        DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error:' || VCOD || ' ' ||  VMENS||'* ');
END;


/
--------------------------------------------------------
--  DDL for Procedure SP_INGRESAR_INSCRIPCION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_INGRESAR_INSCRIPCION" (
    V_NOMBRE_CLIENTE IN VARCHAR2, 
    V_NOMBRE_CLASE IN VARCHAR2)
AS
    V_ID_CLIENTE NUMBER := Obtener_ID_Cliente(V_NOMBRE_CLIENTE);
    V_ID_CLASE NUMBER := Obtener_ID_Clase(V_NOMBRE_CLASE);
BEGIN
        INSERT INTO INSCRIPCIONES (FECHA_INSCRIPCION, ID_CLIENTE, ID_CLASE)
        VALUES (SYSDATE, V_ID_CLIENTE, V_ID_CLASE);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
    RAISE_APPLICATION_ERROR(-20004, 'Violación de clave única al ingresar la evaluación. Verifique los datos proporcionados: ' || SQLERRM);
WHEN VALUE_ERROR THEN
    RAISE_APPLICATION_ERROR(-20005, 'Error de conversión al insertar la evaluación. Verifique los datos proporcionados.');
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20006, 'Error desconocido al ingresar la evaluación: ' || SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_OBTENER_AUDITORIA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_OBTENER_AUDITORIA" (DATOS OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN DATOS FOR
        SELECT ID_LOG, TIPO_OPERACION, TABLA, EJECUTADO_POR, HORA
        FROM AUDITORIA
        ORDER BY HORA DESC;

EXCEPTION
    -- Manejo de excepciones
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error: No se encontraron registros en la tabla AUDITORIA.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error: Ocurrió un error inesperado al obtener los datos de la tabla AUDITORIA.');
END SP_Obtener_Auditoria;


/
--------------------------------------------------------
--  DDL for Procedure SP_OBTENER_INSCRIPCIONES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_OBTENER_INSCRIPCIONES" (DATOS OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN DATOS FOR
        SELECT 
            I.ID_INSCRIPCION, FECHA_INSCRIPCION, 
            C.NOMBRE || ' ' || C.APELLIDO_PATERNO || ' ' || C.APELLIDO_MATERNO AS NOMBRE_COMPLETO,
            CL.NOMBRE AS NOMBRE_CLASE
        FROM 
            INSCRIPCIONES I
        JOIN 
            CLIENTES C ON I.ID_CLIENTE = C.ID_CLIENTE
        JOIN 
            CLASES CL ON I.ID_CLASE = CL.ID_CLASE
        ORDER BY 
            I.FECHA_INSCRIPCION DESC;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error: No se encontraron registros en la tabla INSCRIPCIONES.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error: Ocurrió un error inesperado al obtener los datos de la tabla INSCRIPCIONES.');
END SP_Obtener_Inscripciones;

/
--------------------------------------------------------
--  DDL for Procedure SP_OBTENER_NOMBRES_PROVEEDORES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_OBTENER_NOMBRES_PROVEEDORES" (DATOS OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN DATOS FOR
        SELECT NOMBRE
        FROM PROVEEDORES
        WHERE ESTADO = 1;
commit;
END;


/
--------------------------------------------------------
--  DDL for Procedure SP_VISUALIZAR_MEMBRESIAS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_VISUALIZAR_MEMBRESIAS" (DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'SELECT 
    M.ID_MEMBRESIA,
    M.NOMBRE,
    M.PRECIO,
    M.DURACION
    FROM MEMBRESIAS M
    WHERE M.ESTADO = 1
    ORDER BY M.ID_MEMBRESIA ASC';

    OPEN DATOS FOR VSQL;
END;


/
--------------------------------------------------------
--  DDL for Procedure SP_VISUALIZAR_MEMBRESIAS_ID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_VISUALIZAR_MEMBRESIAS_ID" (ID_MEMBRESIA IN NUMBER, DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
    VCOD NUMBER;
    VMENS VARCHAR2(500);
BEGIN
    VSQL := 'SELECT 
    M.ID_MEMBRESIA,
    M.NOMBRE,
    M.PRECIO,
    M.DURACION
    FROM MEMBRESIAS M
    WHERE M.ID_MEMBRESIA = :P1';
    OPEN DATOS FOR VSQL USING ID_MEMBRESIA;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE(' *No se encontró ninguna membresía con el ID proporcionado* ');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE(' *Se encontraron múltiples membresías con el ID proporcionado* ');
    WHEN OTHERS THEN  
        VCOD := SQLCODE;
        VMENS := SQLERRM;
        DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error al visualizar la membresía: ' || VCOD || ' ' || VMENS || '* ');
END;


/
--------------------------------------------------------
--  DDL for Procedure SP_VISUALIZAR_PRODUCTOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_VISUALIZAR_PRODUCTOS" (DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
BEGIN
    VSQL := 'SELECT 
    P.ID_PRODUCTO,
    P.NOMBRE,
    P.PRECIO,
    P.DESCRIPCION,
    P.EXISTENCIAS,
    PR.NOMBRE AS Nombre_Proveedor
    FROM PRODUCTOS P
    INNER JOIN PROVEEDORES PR ON PR.ID_PROVEEDOR = P.ID_PROVEEDOR
    WHERE P.ESTADO = 1
    AND P.EXISTENCIAS > 0
    ORDER BY P.ID_PRODUCTO ASC';

    OPEN DATOS FOR VSQL;
END;


/
--------------------------------------------------------
--  DDL for Procedure SP_VISUALIZAR_PRODUCTOS_ID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "PLENGUAJES_FINAL"."SP_VISUALIZAR_PRODUCTOS_ID" (ID_PRODUCTO IN NUMBER, DATOS OUT SYS_REFCURSOR)
AS
    VSQL VARCHAR2(2000);
    VCOD NUMBER;
    VMENS VARCHAR2(500);
BEGIN
    VSQL := 'SELECT 
    P.ID_PRODUCTO,
    P.NOMBRE,
    P.PRECIO,
    P.DESCRIPCION,
    P.EXISTENCIAS,
    PR.NOMBRE AS Nombre_Proveedor
    FROM PRODUCTOS P
    INNER JOIN PROVEEDORES PR ON PR.ID_PROVEEDOR = P.ID_PROVEEDOR
    WHERE P.ID_PRODUCTO = :P1';
    OPEN DATOS FOR VSQL USING ID_PRODUCTO;

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE(' *No se encontró ningún producto con el ID proporcionado* ');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE(' *Se encontraron múltiples productos con el ID proporcionado* ');
    WHEN OTHERS THEN  
        VCOD := SQLCODE;
        VMENS := SQLERRM;
        DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error:' || VCOD || ' ' ||  VMENS||'* ');
END;


/
--------------------------------------------------------
--  DDL for Package PAQUETE_AUDITORIA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLENGUAJES_FINAL"."PAQUETE_AUDITORIA" AS
    PROCEDURE SP_Obtener_Auditoria (DATOS OUT SYS_REFCURSOR);
END Paquete_Auditoria;


/
--------------------------------------------------------
--  DDL for Package PAQUETE_CLASES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLENGUAJES_FINAL"."PAQUETE_CLASES" AS

    -- Declaración de procedimientos
    PROCEDURE Actualizar_Clase(
        V_ID_CLASE IN NUMBER, 
        V_NOMBRE IN VARCHAR2, 
        V_DESCRIPCION IN VARCHAR2, 
        V_CAPACIDAD IN NUMBER, 
        V_HORARIO IN VARCHAR2, 
        V_NOMBRE_ENTRENADOR IN VARCHAR2);

    PROCEDURE Eliminar_Clase(
        ID_CLASE IN NUMBER);

    PROCEDURE Ingresar_Clases(
        V_NOMBRE IN VARCHAR2, 
        V_DESCRIPCION IN VARCHAR2, 
        V_CAPACIDAD IN NUMBER, 
        V_HORARIO IN VARCHAR2, 
        V_NOMBRE_ENTRENADOR IN VARCHAR2);

    PROCEDURE Obtener_Clase_Por_ID(
        ID_CLASE IN NUMBER, 
        DATOS OUT SYS_REFCURSOR);

    PROCEDURE Obtener_Clases(
        DATOS OUT SYS_REFCURSOR);

    PROCEDURE Obtener_Nombres_Entrenadores(
        DATOS OUT SYS_REFCURSOR);

END Paquete_Clases;


/
--------------------------------------------------------
--  DDL for Package PAQUETE_CLIENTES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLENGUAJES_FINAL"."PAQUETE_CLIENTES" AS
    PROCEDURE Actualizar_Cliente (
        V_ID_CLIENTE IN NUMBER, 
        V_NOMBRE IN VARCHAR2, 
        V_APELLIDO_PATERNO IN VARCHAR2, 
        V_APELLIDO_MATERNO IN VARCHAR2, 
        V_EDAD IN NUMBER, 
        V_EMAIL IN VARCHAR2, 
        V_TELEFONO IN VARCHAR2, 
        V_NOMBRE_MEMBRESIA IN VARCHAR2
    );

    PROCEDURE Eliminar_Cliente (ID_CLIENTE IN NUMBER);

    PROCEDURE Ingresar_Cliente (
        V_NOMBRE IN VARCHAR2, 
        V_APELLIDO_PATERNO IN VARCHAR2, 
        V_APELLIDO_MATERNO IN VARCHAR2, 
        V_EDAD IN NUMBER, 
        V_EMAIL IN VARCHAR2, 
        V_TELEFONO IN VARCHAR2, 
        V_NOMBRE_MEMBRESIA IN VARCHAR2
    );

    PROCEDURE Obtener_Cliente_Por_ID (
        ID_CLIENTE IN NUMBER, 
        DATOS OUT SYS_REFCURSOR
    );

    PROCEDURE Obtener_Clientes (
        DATOS OUT SYS_REFCURSOR
    );

    PROCEDURE Obtener_Clientes_Pagos (
        DATOS OUT SYS_REFCURSOR
    );

    PROCEDURE Obtener_Membresias (
        DATOS OUT SYS_REFCURSOR
    );

    PROCEDURE Obtener_Nombres_Clientes (
        DATOS OUT SYS_REFCURSOR
    );
END Paquete_Clientes;


/
--------------------------------------------------------
--  DDL for Package PAQUETE_ENTRENADOR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLENGUAJES_FINAL"."PAQUETE_ENTRENADOR" AS

    -- Declaración de procedimientos
    PROCEDURE Actualizar_Entrenador(
        V_ID_ENTRENADOR IN NUMBER, 
        V_NOMBRE IN VARCHAR2, 
        V_APELLIDO_PATERNO IN VARCHAR2, 
        V_APELLIDO_MATERNO IN VARCHAR2, 
        V_ESPECIALIDAD IN VARCHAR2);

    PROCEDURE Eliminar_Entrenador(
        ID_ENTRENADOR IN NUMBER);

    PROCEDURE Ingresar_Entrenador(
        V_NOMBRE IN VARCHAR2, 
        V_APELLIDO_PATERNO IN VARCHAR2, 
        V_APELLIDO_MATERNO IN VARCHAR2, 
        V_ESPECIALIDAD IN VARCHAR2);

    PROCEDURE Obtener_Entrenador_Por_ID(
        V_ID_ENTRENADOR IN NUMBER, 
        DATOS OUT SYS_REFCURSOR);

    PROCEDURE Obtener_Entrenadores(
        DATOS OUT SYS_REFCURSOR);

END Paquete_Entrenador;


/
--------------------------------------------------------
--  DDL for Package PAQUETE_EVALUACIONES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLENGUAJES_FINAL"."PAQUETE_EVALUACIONES" AS
    PROCEDURE Actualizar_Evaluacion (
        V_ID_EVALUACION IN NUMBER, 
        V_PESO IN NUMBER, 
        V_GRASA_CORPORAL IN NUMBER, 
        V_MASA_MUSCULAR IN NUMBER, 
        V_FECHA_EVALUACION IN DATE, 
        V_NOMBRE_CLIENTE IN VARCHAR2
    );

    PROCEDURE Eliminar_Evaluacion (ID_EVALUACION IN NUMBER);

    PROCEDURE Ingresar_Evaluacion (
        V_PESO IN NUMBER, 
        V_GRASA_CORPORAL IN NUMBER, 
        V_MASA_MUSCULAR IN NUMBER, 
        V_FECHA_EVALUACION IN DATE, 
        V_NOMBRE_CLIENTE IN VARCHAR2
    );

    PROCEDURE Obtener_Evaluacion_Por_ID (
        ID_EVALUACION IN NUMBER, 
        DATOS OUT SYS_REFCURSOR
    );

    PROCEDURE Obtener_Evaluaciones (
        DATOS OUT SYS_REFCURSOR
    );
END Paquete_Evaluaciones;


/
--------------------------------------------------------
--  DDL for Package PAQUETE_INSCRIPCIONES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLENGUAJES_FINAL"."PAQUETE_INSCRIPCIONES" AS
    PROCEDURE SP_Obtener_Inscripciones (DATOS OUT SYS_REFCURSOR);
    PROCEDURE SP_Ingresar_Inscripcion (
        V_NOMBRE_CLIENTE IN VARCHAR2, 
        V_NOMBRE_CLASE IN VARCHAR2
    );
    PROCEDURE SP_Eliminar_Inscripcion (ID_INSCRIPCION IN NUMBER);
END Paquete_Inscripciones;


/
--------------------------------------------------------
--  DDL for Package PAQUETE_INVENTARIO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLENGUAJES_FINAL"."PAQUETE_INVENTARIO" AS
    -- Procedimientos
    PROCEDURE SP_Obtener_Nombres_Proveedores (DATOS OUT SYS_REFCURSOR);
    PROCEDURE SP_Crear_Productos (
        V_NOMBRE IN VARCHAR2, 
        V_PRECIO IN NUMBER, 
        V_DESCRIPCION IN VARCHAR2, 
        V_EXISTENCIAS IN NUMBER, 
        V_NOMBRE_PROVEEDOR IN VARCHAR2
    );
    PROCEDURE SP_Visualizar_Productos (DATOS OUT SYS_REFCURSOR);
    PROCEDURE SP_Visualizar_Productos_ID (ID_PRODUCTO IN NUMBER, DATOS OUT SYS_REFCURSOR);
    PROCEDURE SP_Editar_Productos (
        V_ID_PRODUCTO IN NUMBER, 
        V_NOMBRE IN VARCHAR2, 
        V_PRECIO IN NUMBER, 
        V_DESCRIPCION IN VARCHAR2, 
        V_EXISTENCIAS IN NUMBER, 
        V_NOMBRE_PROVEEDOR IN VARCHAR2
    );
    PROCEDURE SP_Eliminar_Productos (ID_PRODUCTO IN NUMBER);
END Paquete_Inventario;


/
--------------------------------------------------------
--  DDL for Package PAQUETE_MEMBRESIAS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLENGUAJES_FINAL"."PAQUETE_MEMBRESIAS" AS
    -- Procedimientos
    PROCEDURE SP_Crear_Membresias (
        V_NOMBRE IN VARCHAR2, 
        V_PRECIO IN NUMBER, 
        V_DURACION IN NUMBER
    );
    PROCEDURE SP_Visualizar_Membresias (DATOS OUT SYS_REFCURSOR);
    PROCEDURE SP_Visualizar_Membresias_ID (ID_MEMBRESIA IN NUMBER, DATOS OUT SYS_REFCURSOR);
    PROCEDURE SP_Editar_Membresias (
        V_ID_MEMBRESIA IN NUMBER, 
        V_NOMBRE IN VARCHAR2, 
        V_PRECIO IN NUMBER, 
        V_DURACION IN NUMBER
    );
    PROCEDURE SP_Eliminar_Membresias (ID_MEMBRESIA IN NUMBER);
END Paquete_Membresias;


/
--------------------------------------------------------
--  DDL for Package PAQUETE_PAGOS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLENGUAJES_FINAL"."PAQUETE_PAGOS" AS
    PROCEDURE Actualizar_Pago (
        V_ID_PAGO IN NUMBER, 
        V_MONTO IN NUMBER, 
        V_FECHA_PAGO IN DATE, 
        V_METODO_PAGO IN VARCHAR2, 
        V_CONCEPTO IN VARCHAR2, 
        V_NOMBRE_CLIENTE IN VARCHAR2
    );

    PROCEDURE Eliminar_Pago (ID_PAGO IN NUMBER);

    PROCEDURE Ingresar_Pago (
        V_MONTO IN NUMBER, 
        V_FECHA_PAGO IN DATE, 
        V_METODO_PAGO IN VARCHAR2, 
        V_CONCEPTO IN VARCHAR2, 
        V_NOMBRE_CLIENTE IN VARCHAR2
    );

    PROCEDURE Obtener_Pago_Por_ID (
        ID_PAGO IN NUMBER, 
        DATOS OUT SYS_REFCURSOR
    );

    PROCEDURE Obtener_Pagos (
        DATOS OUT SYS_REFCURSOR
    );
END Paquete_Pagos;


/
--------------------------------------------------------
--  DDL for Package PAQUETE_PEDIDOS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLENGUAJES_FINAL"."PAQUETE_PEDIDOS" AS
    -- Procedimientos
    PROCEDURE Obtener_Pedidos (DATOS OUT SYS_REFCURSOR);
    PROCEDURE Obtener_Nombre_Productos (DATOS OUT SYS_REFCURSOR);
    PROCEDURE Obtener_Nombre_Clientes (DATOS OUT SYS_REFCURSOR);
    PROCEDURE Obtener_Pedido_Por_ID (PID IN NUMBER, DATOS OUT SYS_REFCURSOR);
    PROCEDURE Ingresar_Pedido (PFECHA IN DATE, PESTADO IN VARCHAR2, PCLIENTE IN VARCHAR2, PCANTIDAD IN NUMBER, PPRODUCTO IN VARCHAR2);
    PROCEDURE Actualizar_Pedido (PID IN NUMBER, PFECHA IN DATE, PPRODUCTO IN VARCHAR2, PESTADO IN VARCHAR2, PCANTIDAD IN NUMBER);
    PROCEDURE Eliminar_Pedido (PID IN NUMBER);
END Paquete_Pedidos;


/
--------------------------------------------------------
--  DDL for Package PAQUETE_PROVEEDORES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLENGUAJES_FINAL"."PAQUETE_PROVEEDORES" AS
    -- Procedimientos
    PROCEDURE Obtener_Proveedores (DATOS OUT SYS_REFCURSOR);
    PROCEDURE Obtener_Proveedor_Por_ID (PID IN NUMBER, DATOS OUT SYS_REFCURSOR);
    PROCEDURE Ingresar_Proveedor (PNOMBRE IN VARCHAR2, PTELEFONO IN VARCHAR2, PDIRECCION IN VARCHAR2);
    PROCEDURE Actualizar_Proveedor (PID IN NUMBER, PNOMBRE IN VARCHAR2, PTELEFONO IN VARCHAR2, PDIRECCION IN VARCHAR2);
    PROCEDURE Eliminar_Proveedor (PID IN NUMBER);
END Paquete_Proveedores;


/
--------------------------------------------------------
--  DDL for Package Body PAQUETE_AUDITORIA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLENGUAJES_FINAL"."PAQUETE_AUDITORIA" AS

    PROCEDURE SP_Obtener_Auditoria (DATOS OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN DATOS FOR
            SELECT ID_LOG, TIPO_OPERACION, TABLA, EJECUTADO_POR, HORA
            FROM AUDITORIA
            ORDER BY HORA DESC;

    EXCEPTION
        -- Manejo de excepciones
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'Error: No se encontraron registros en la tabla AUDITORIA.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002, 'Error: Ocurrió un error inesperado al obtener los datos de la tabla AUDITORIA.');
    END SP_Obtener_Auditoria;

END Paquete_Auditoria;


/
--------------------------------------------------------
--  DDL for Package Body PAQUETE_CLASES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLENGUAJES_FINAL"."PAQUETE_CLASES" AS

    PROCEDURE Actualizar_Clase(
        V_ID_CLASE IN NUMBER, 
        V_NOMBRE IN VARCHAR2, 
        V_DESCRIPCION IN VARCHAR2, 
        V_CAPACIDAD IN NUMBER, 
        V_HORARIO IN VARCHAR2, 
        V_NOMBRE_ENTRENADOR IN VARCHAR2) 
    AS
        V_ID_ENTRENADOR NUMBER := Obtener_ID_Entrenador(V_NOMBRE_ENTRENADOR);
    BEGIN
        UPDATE CLASES SET 
            NOMBRE = V_NOMBRE,
            DESCRIPCION = V_DESCRIPCION,
            CAPACIDAD = V_CAPACIDAD,
            HORARIO = V_HORARIO,
            ID_ENTRENADOR = V_ID_ENTRENADOR
        WHERE ID_CLASE = V_ID_CLASE;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20005, 'No se encontro la clase con el ID proporcionado.');
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar la clase: ' || SQLERRM);
    END;

    PROCEDURE Eliminar_Clase(
        ID_CLASE IN NUMBER) 
    AS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'UPDATE CLASES SET ESTADO = 0 WHERE ID_CLASE = :P1';
        EXECUTE IMMEDIATE VSQL USING ID_CLASE;
    END;

    PROCEDURE Ingresar_Clases(
        V_NOMBRE IN VARCHAR2, 
        V_DESCRIPCION IN VARCHAR2, 
        V_CAPACIDAD IN NUMBER, 
        V_HORARIO IN VARCHAR2, 
        V_NOMBRE_ENTRENADOR IN VARCHAR2) 
    AS
        V_ID_ENTRENADOR NUMBER := Obtener_ID_Entrenador(V_NOMBRE_ENTRENADOR);
    BEGIN
        INSERT INTO CLASES (NOMBRE, DESCRIPCION, CAPACIDAD, HORARIO, ID_ENTRENADOR, ESTADO)
        VALUES (V_NOMBRE, V_DESCRIPCION, V_CAPACIDAD, V_HORARIO, V_ID_ENTRENADOR, 1);

        EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN
                RAISE_APPLICATION_ERROR(-20004, 'Violacion de clave unica al ingresar la clase. Verifique los datos proporcionados.');
            WHEN VALUE_ERROR THEN
                RAISE_APPLICATION_ERROR(-20005, 'Error de conversion al insertar la clase. Verifique los datos proporcionados.');
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20006, 'Error desconocido al ingresar la clase: ' || SQLERRM);
    END;

    PROCEDURE Obtener_Clase_Por_ID(
        ID_CLASE IN NUMBER, 
        DATOS OUT SYS_REFCURSOR) 
    AS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT 
            C.ID_CLASE,
            C.NOMBRE,
            C.DESCRIPCION,
            C.CAPACIDAD,
            C.HORARIO,
            E.NOMBRE || '' '' || E.APELLIDO_PATERNO || '' '' || E.APELLIDO_MATERNO AS NOMBRE_COMPLETO
        FROM CLASES C
        INNER JOIN ENTRENADORES E ON E.ID_ENTRENADOR = C.ID_ENTRENADOR
        WHERE C.ID_CLASE = :P1 
          AND C.ESTADO = 1 
          AND E.ESTADO = 1';

        OPEN DATOS FOR VSQL USING ID_CLASE;
    END;

    PROCEDURE Obtener_Clases(
        DATOS OUT SYS_REFCURSOR) 
    AS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT 
            C.ID_CLASE,
            C.NOMBRE,
            C.DESCRIPCION,
            C.CAPACIDAD,
            C.HORARIO,
            E.NOMBRE || '' '' || E.APELLIDO_PATERNO || '' '' || E.APELLIDO_MATERNO AS NOMBRE_COMPLETO
        FROM CLASES C
        INNER JOIN ENTRENADORES E ON E.ID_ENTRENADOR = C.ID_ENTRENADOR
        WHERE C.ESTADO = 1 
          AND E.ESTADO = 1
          AND C.CAPACIDAD > 0
        ORDER BY C.ID_CLASE ASC';

        OPEN DATOS FOR VSQL;
    END;

    PROCEDURE Obtener_Nombres_Entrenadores(
        DATOS OUT SYS_REFCURSOR) 
    AS
    BEGIN
        OPEN DATOS FOR
            SELECT 
                NOMBRE || ' ' || APELLIDO_PATERNO || ' ' || APELLIDO_MATERNO AS NOMBRE_COMPLETO
            FROM ENTRENADORES
            WHERE ESTADO = 1;
    END;

END Paquete_Clases;


/
--------------------------------------------------------
--  DDL for Package Body PAQUETE_CLIENTES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLENGUAJES_FINAL"."PAQUETE_CLIENTES" AS

    PROCEDURE Actualizar_Cliente (
        V_ID_CLIENTE IN NUMBER, 
        V_NOMBRE IN VARCHAR2, 
        V_APELLIDO_PATERNO IN VARCHAR2, 
        V_APELLIDO_MATERNO IN VARCHAR2, 
        V_EDAD IN NUMBER, 
        V_EMAIL IN VARCHAR2, 
        V_TELEFONO IN VARCHAR2, 
        V_NOMBRE_MEMBRESIA IN VARCHAR2
    ) IS
        V_ID_MEMBRESIA NUMBER := Obtener_ID_Membresia(V_NOMBRE_MEMBRESIA);
    BEGIN
        UPDATE CLIENTES SET 
        NOMBRE = V_NOMBRE,
        APELLIDO_PATERNO = V_APELLIDO_PATERNO,
        APELLIDO_MATERNO = V_APELLIDO_MATERNO,
        EDAD = V_EDAD,
        EMAIL = V_EMAIL,
        TELEFONO = V_TELEFONO,
        ID_MEMBRESIA = V_ID_MEMBRESIA
        WHERE ID_CLIENTE = V_ID_CLIENTE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'No se encontró el cliente con el ID proporcionado.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar el cliente: ' || SQLERRM);
    END Actualizar_Cliente;

    PROCEDURE Eliminar_Cliente (ID_CLIENTE IN NUMBER) IS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'UPDATE CLIENTES SET ESTADO = 0 WHERE ID_CLIENTE = :P1';
        EXECUTE IMMEDIATE VSQL USING ID_CLIENTE;
    END Eliminar_Cliente;

    PROCEDURE Ingresar_Cliente (
        V_NOMBRE IN VARCHAR2, 
        V_APELLIDO_PATERNO IN VARCHAR2, 
        V_APELLIDO_MATERNO IN VARCHAR2, 
        V_EDAD IN NUMBER, 
        V_EMAIL IN VARCHAR2, 
        V_TELEFONO IN VARCHAR2, 
        V_NOMBRE_MEMBRESIA IN VARCHAR2
    ) IS
        V_ID_MEMBRESIA NUMBER := Obtener_ID_Membresia(V_NOMBRE_MEMBRESIA);
    BEGIN
        INSERT INTO CLIENTES (NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO, EDAD, EMAIL, TELEFONO, ID_MEMBRESIA, ESTADO)
        VALUES (V_NOMBRE, V_APELLIDO_PATERNO, V_APELLIDO_MATERNO, V_EDAD, V_EMAIL, V_TELEFONO, V_ID_MEMBRESIA, 1);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-20004, 'Violación de clave única al ingresar el cliente. Verifique los datos proporcionados.');
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20005, 'Error de conversión al insertar el cliente. Verifique los datos proporcionados.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20006, 'Error desconocido al ingresar el cliente: ' || SQLERRM);
    END Ingresar_Cliente;

    PROCEDURE Obtener_Cliente_Por_ID (
        ID_CLIENTE IN NUMBER, 
        DATOS OUT SYS_REFCURSOR
    ) IS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT 
        C.ID_CLIENTE,
        C.NOMBRE,
        C.APELLIDO_PATERNO,
        C.APELLIDO_MATERNO,
        C.EDAD,
        C.EMAIL,
        C.TELEFONO,
        M.NOMBRE AS Nombre_Membresia
        FROM CLIENTES C
        INNER JOIN Membresias M ON M.ID_MEMBRESIA = C.ID_MEMBRESIA
        WHERE C.ID_CLIENTE = :P1';
        OPEN DATOS FOR VSQL USING ID_CLIENTE;
    END Obtener_Cliente_Por_ID;

    PROCEDURE Obtener_Clientes (
        DATOS OUT SYS_REFCURSOR
    ) IS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT 
        C.ID_CLIENTE,
        C.NOMBRE,
        C.APELLIDO_PATERNO,
        C.APELLIDO_MATERNO,
        C.EDAD,
        C.EMAIL,
        C.TELEFONO,
        M.NOMBRE AS Nombre_Membresia
        FROM CLIENTES C
        INNER JOIN Membresias M ON M.ID_MEMBRESIA = C.ID_MEMBRESIA
        WHERE C.ESTADO = 1
        ORDER BY C.ID_CLIENTE ASC';
        OPEN DATOS FOR VSQL;
    END Obtener_Clientes;

    PROCEDURE Obtener_Clientes_Pagos (
        DATOS OUT SYS_REFCURSOR
    ) IS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT 
        ID_CLIENTE,
        NOMBRE || '' '' || APELLIDO_PATERNO || '' '' || APELLIDO_MATERNO AS NOMBRE_COMPLETO
        FROM CLIENTES
        WHERE ESTADO = 1
        ORDER BY ID_CLIENTE ASC';
        OPEN DATOS FOR VSQL;
    END Obtener_Clientes_Pagos;

    PROCEDURE Obtener_Membresias (
        DATOS OUT SYS_REFCURSOR
    ) IS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT 
        ID_MEMBRESIA,
        NOMBRE,
        PRECIO,
        DURACION
        FROM MEMBRESIAS
        WHERE ESTADO = 1
        ORDER BY ID_MEMBRESIA ASC';
        OPEN DATOS FOR VSQL;
    END Obtener_Membresias;

    PROCEDURE Obtener_Nombres_Clientes (
        DATOS OUT SYS_REFCURSOR
    ) IS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT 
        ID_CLIENTE,
        NOMBRE || '' '' || APELLIDO_PATERNO || '' '' || APELLIDO_MATERNO AS NOMBRE_COMPLETO
        FROM CLIENTES
        WHERE ESTADO = 1
        ORDER BY ID_CLIENTE ASC';
        OPEN DATOS FOR VSQL;
    END Obtener_Nombres_Clientes;

END Paquete_Clientes;


/
--------------------------------------------------------
--  DDL for Package Body PAQUETE_ENTRENADOR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLENGUAJES_FINAL"."PAQUETE_ENTRENADOR" AS

    PROCEDURE Actualizar_Entrenador(
        V_ID_ENTRENADOR IN NUMBER, 
        V_NOMBRE IN VARCHAR2, 
        V_APELLIDO_PATERNO IN VARCHAR2, 
        V_APELLIDO_MATERNO IN VARCHAR2, 
        V_ESPECIALIDAD IN VARCHAR2) 
    AS
    BEGIN
        UPDATE ENTRENADORES SET 
            NOMBRE = V_NOMBRE,
            APELLIDO_PATERNO = V_APELLIDO_PATERNO,
            APELLIDO_MATERNO = V_APELLIDO_MATERNO,
            ESPECIALIDAD = V_ESPECIALIDAD
        WHERE ID_ENTRENADOR = V_ID_ENTRENADOR;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20005, 'No se encontro el entrenador con el ID proporcionado.');
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar el entrenador: ' || SQLERRM);
    END;

    PROCEDURE Eliminar_Entrenador(
        ID_ENTRENADOR IN NUMBER) 
    AS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'UPDATE ENTRENADORES SET ESTADO = 0 WHERE ID_ENTRENADOR = :P1';
        EXECUTE IMMEDIATE VSQL USING ID_ENTRENADOR;
    END;

    PROCEDURE Ingresar_Entrenador(
        V_NOMBRE IN VARCHAR2, 
        V_APELLIDO_PATERNO IN VARCHAR2, 
        V_APELLIDO_MATERNO IN VARCHAR2, 
        V_ESPECIALIDAD IN VARCHAR2) 
    AS
    BEGIN
        INSERT INTO ENTRENADORES (NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO, ESPECIALIDAD)
        VALUES (V_NOMBRE, V_APELLIDO_PATERNO, V_APELLIDO_MATERNO, V_ESPECIALIDAD);

        EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN
                RAISE_APPLICATION_ERROR(-20011, 'Violacion de clave unica al ingresar el entrenador. Verifique los datos proporcionados.');
            WHEN VALUE_ERROR THEN
                RAISE_APPLICATION_ERROR(-20012, 'Error de conversion al insertar el entrenador. Verifique los datos proporcionados.');
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20013, 'Error desconocido al ingresar el entrenador: ' || SQLERRM);
    END;

    PROCEDURE Obtener_Entrenador_Por_ID(
        V_ID_ENTRENADOR IN NUMBER, 
        DATOS OUT SYS_REFCURSOR) 
    AS
    BEGIN
        OPEN DATOS FOR
            SELECT 
                ID_ENTRENADOR,
                NOMBRE,
                APELLIDO_PATERNO,
                APELLIDO_MATERNO,
                ESPECIALIDAD
            FROM ENTRENADORES
            WHERE ID_ENTRENADOR = V_ID_ENTRENADOR;
    END;

    PROCEDURE Obtener_Entrenadores(
        DATOS OUT SYS_REFCURSOR) 
    AS
    BEGIN
        OPEN DATOS FOR
            SELECT 
                ID_ENTRENADOR,
                NOMBRE,
                APELLIDO_PATERNO,
                APELLIDO_MATERNO,
                ESPECIALIDAD
            FROM ENTRENADORES
            WHERE ESTADO = 1
            ORDER BY ID_ENTRENADOR ASC;
    END;

END Paquete_Entrenador;


/
--------------------------------------------------------
--  DDL for Package Body PAQUETE_EVALUACIONES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLENGUAJES_FINAL"."PAQUETE_EVALUACIONES" AS

    PROCEDURE Actualizar_Evaluacion (
        V_ID_EVALUACION IN NUMBER, 
        V_PESO IN NUMBER, 
        V_GRASA_CORPORAL IN NUMBER, 
        V_MASA_MUSCULAR IN NUMBER, 
        V_FECHA_EVALUACION IN DATE, 
        V_NOMBRE_CLIENTE IN VARCHAR2
    ) IS
        V_ID_CLIENTE NUMBER := Obtener_ID_Cliente(V_NOMBRE_CLIENTE);
    BEGIN
        UPDATE EVALUACIONES SET 
        PESO = V_PESO,
        GRASA_CORPORAL = V_GRASA_CORPORAL,
        MASA_MUSCULAR = V_MASA_MUSCULAR,
        FECHA_EVALUACION = V_FECHA_EVALUACION,
        ID_CLIENTE = V_ID_CLIENTE
        WHERE ID_EVALUACION = V_ID_EVALUACION;
        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'No se encontró el cliente con el ID proporcionado.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar la evaluación: ' || SQLERRM);
    END Actualizar_Evaluacion;

    PROCEDURE Eliminar_Evaluacion (ID_EVALUACION IN NUMBER) IS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'DELETE FROM EVALUACIONES WHERE ID_EVALUACION = :P1';
        EXECUTE IMMEDIATE VSQL USING ID_EVALUACION;
    END Eliminar_Evaluacion;

    PROCEDURE Ingresar_Evaluacion (
        V_PESO IN NUMBER, 
        V_GRASA_CORPORAL IN NUMBER, 
        V_MASA_MUSCULAR IN NUMBER, 
        V_FECHA_EVALUACION IN DATE, 
        V_NOMBRE_CLIENTE IN VARCHAR2
    ) IS
        V_ID_CLIENTE NUMBER := Obtener_ID_Cliente(V_NOMBRE_CLIENTE);
    BEGIN
        INSERT INTO EVALUACIONES (PESO, GRASA_CORPORAL, MASA_MUSCULAR, FECHA_EVALUACION, ID_CLIENTE)
        VALUES (V_PESO, V_GRASA_CORPORAL, V_MASA_MUSCULAR, V_FECHA_EVALUACION, V_ID_CLIENTE);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-20004, 'Violación de clave única al ingresar la evaluación. Verifique los datos proporcionados.');
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20005, 'Error de conversión al insertar la evaluación. Verifique los datos proporcionados.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20006, 'Error desconocido al ingresar la evaluación: ' || SQLERRM);
    END Ingresar_Evaluacion;

    PROCEDURE Obtener_Evaluacion_Por_ID (
        ID_EVALUACION IN NUMBER, 
        DATOS OUT SYS_REFCURSOR
    ) IS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT 
        E.ID_EVALUACION,
        E.PESO,
        E.GRASA_CORPORAL,
        E.MASA_MUSCULAR,
        E.FECHA_EVALUACION,
        C.ID_CLIENTE,
        C.NOMBRE || '' '' || C.APELLIDO_PATERNO || '' '' || C.APELLIDO_MATERNO AS Nombre_Cliente
        FROM EVALUACIONES E
        INNER JOIN CLIENTES C ON C.ID_CLIENTE = E.ID_CLIENTE
        WHERE E.ID_EVALUACION = :P1';
        OPEN DATOS FOR VSQL USING ID_EVALUACION;
    END Obtener_Evaluacion_Por_ID;

    PROCEDURE Obtener_Evaluaciones (
        DATOS OUT SYS_REFCURSOR
    ) IS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT 
        E.ID_EVALUACION,
        E.PESO,
        E.GRASA_CORPORAL,
        E.MASA_MUSCULAR,
        E.FECHA_EVALUACION,
        C.ID_CLIENTE,
        C.NOMBRE || '' '' || C.APELLIDO_PATERNO || '' '' || C.APELLIDO_MATERNO AS Nombre_Cliente
        FROM EVALUACIONES E
        INNER JOIN CLIENTES C ON C.ID_CLIENTE = E.ID_CLIENTE
        WHERE C.ESTADO = 1
        ORDER BY E.ID_EVALUACION ASC';
        OPEN DATOS FOR VSQL;
    END Obtener_Evaluaciones;

END Paquete_Evaluaciones;


/
--------------------------------------------------------
--  DDL for Package Body PAQUETE_INSCRIPCIONES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLENGUAJES_FINAL"."PAQUETE_INSCRIPCIONES" AS

    PROCEDURE SP_Obtener_Inscripciones (DATOS OUT SYS_REFCURSOR) IS
    BEGIN
        OPEN DATOS FOR
            SELECT 
                I.ID_INSCRIPCION, FECHA_INSCRIPCION, 
                C.NOMBRE || ' ' || C.APELLIDO_PATERNO || ' ' || C.APELLIDO_MATERNO AS NOMBRE_COMPLETO,
                CL.NOMBRE AS NOMBRE_CLASE
            FROM 
                INSCRIPCIONES I
            JOIN 
                CLIENTES C ON I.ID_CLIENTE = C.ID_CLIENTE
            JOIN 
                CLASES CL ON I.ID_CLASE = CL.ID_CLASE
            ORDER BY 
                I.FECHA_INSCRIPCION DESC;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'Error: No se encontraron registros en la tabla INSCRIPCIONES.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002, 'Error: Ocurrió un error inesperado al obtener los datos de la tabla INSCRIPCIONES.');
    END SP_Obtener_Inscripciones;

    PROCEDURE SP_Ingresar_Inscripcion (
        V_NOMBRE_CLIENTE IN VARCHAR2, 
        V_NOMBRE_CLASE IN VARCHAR2
    ) IS
        V_ID_CLIENTE NUMBER := Obtener_ID_Cliente(V_NOMBRE_CLIENTE);
        V_ID_CLASE NUMBER := Obtener_ID_Clase(V_NOMBRE_CLASE);
    BEGIN
        INSERT INTO INSCRIPCIONES (FECHA_INSCRIPCION, ID_CLIENTE, ID_CLASE)
        VALUES (SYSDATE, V_ID_CLIENTE, V_ID_CLASE);

    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-20004, 'Violación de clave única al ingresar la inscripción. Verifique los datos proporcionados: ' || SQLERRM);
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20005, 'Error de conversión al insertar la inscripción. Verifique los datos proporcionados.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20006, 'Error desconocido al ingresar la inscripción: ' || SQLERRM);
    END SP_Ingresar_Inscripcion;

    PROCEDURE SP_Eliminar_Inscripcion (ID_INSCRIPCION IN NUMBER) IS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'DELETE FROM INSCRIPCIONES
                 WHERE ID_INSCRIPCION = :P1';
        EXECUTE IMMEDIATE VSQL USING ID_INSCRIPCION;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'Error: No se encontró la inscripción con el ID proporcionado.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002, 'Error: Ocurrió un error inesperado al eliminar la inscripción.');
    END SP_Eliminar_Inscripcion;

END Paquete_Inscripciones;


/
--------------------------------------------------------
--  DDL for Package Body PAQUETE_INVENTARIO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLENGUAJES_FINAL"."PAQUETE_INVENTARIO" AS

    -- Procedimiento para obtener nombres de proveedores
    PROCEDURE SP_Obtener_Nombres_Proveedores (DATOS OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN DATOS FOR
            SELECT NOMBRE
            FROM PROVEEDORES
            WHERE ESTADO = 1;
        COMMIT;
    END SP_Obtener_Nombres_Proveedores;

    -- Procedimiento para crear productos
    PROCEDURE SP_Crear_Productos (
        V_NOMBRE IN VARCHAR2, 
        V_PRECIO IN NUMBER, 
        V_DESCRIPCION IN VARCHAR2, 
        V_EXISTENCIAS IN NUMBER, 
        V_NOMBRE_PROVEEDOR IN VARCHAR2
    ) AS
        V_ID_PROVEEDOR NUMBER;
        VCOD NUMBER;
        VMENS VARCHAR2(500);
    BEGIN
        V_ID_PROVEEDOR := FN_Obtener_ID_Proveedor(V_NOMBRE_PROVEEDOR);

        IF V_ID_PROVEEDOR IS NOT NULL THEN
            INSERT INTO PRODUCTOS (NOMBRE, PRECIO, DESCRIPCION, EXISTENCIAS, ID_PROVEEDOR, ESTADO)
            VALUES (V_NOMBRE, V_PRECIO, V_DESCRIPCION, V_EXISTENCIAS, V_ID_PROVEEDOR, 1);
        END IF;
        COMMIT;    
    EXCEPTION
        WHEN OTHERS THEN  
            VCOD := SQLCODE;
            VMENS := SQLERRM;
            DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error:' || VCOD || ' ' ||  VMENS || '* ');
    END SP_Crear_Productos;

    -- Procedimiento para visualizar productos
    PROCEDURE SP_Visualizar_Productos (DATOS OUT SYS_REFCURSOR) AS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT 
            P.ID_PRODUCTO,
            P.NOMBRE,
            P.PRECIO,
            P.DESCRIPCION,
            P.EXISTENCIAS,
            PR.NOMBRE AS Nombre_Proveedor
            FROM PRODUCTOS P
            INNER JOIN PROVEEDORES PR ON PR.ID_PROVEEDOR = P.ID_PROVEEDOR
            WHERE P.ESTADO = 1
            AND P.EXISTENCIAS > 0
            ORDER BY P.ID_PRODUCTO ASC';

        OPEN DATOS FOR VSQL;
    END SP_Visualizar_Productos;

    -- Procedimiento para visualizar productos por ID
    PROCEDURE SP_Visualizar_Productos_ID (ID_PRODUCTO IN NUMBER, DATOS OUT SYS_REFCURSOR) AS
        VSQL VARCHAR2(2000);
        VCOD NUMBER;
        VMENS VARCHAR2(500);
    BEGIN
        VSQL := 'SELECT 
            P.ID_PRODUCTO,
            P.NOMBRE,
            P.PRECIO,
            P.DESCRIPCION,
            P.EXISTENCIAS,
            PR.NOMBRE AS Nombre_Proveedor
            FROM PRODUCTOS P
            INNER JOIN PROVEEDORES PR ON PR.ID_PROVEEDOR = P.ID_PROVEEDOR
            WHERE P.ID_PRODUCTO = :P1';
        OPEN DATOS FOR VSQL USING ID_PRODUCTO;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE(' *No se encontró ningún producto con el ID proporcionado* ');
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE(' *Se encontraron múltiples productos con el ID proporcionado* ');
        WHEN OTHERS THEN  
            VCOD := SQLCODE;
            VMENS := SQLERRM;
            DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error:' || VCOD || ' ' ||  VMENS || '* ');
    END SP_Visualizar_Productos_ID;

    -- Procedimiento para editar productos
    PROCEDURE SP_Editar_Productos (
        V_ID_PRODUCTO IN NUMBER, 
        V_NOMBRE IN VARCHAR2, 
        V_PRECIO IN NUMBER, 
        V_DESCRIPCION IN VARCHAR2, 
        V_EXISTENCIAS IN NUMBER, 
        V_NOMBRE_PROVEEDOR IN VARCHAR2
    ) AS
        V_ID_PROVEEDOR NUMBER;
        VCOD NUMBER;
        VMENS VARCHAR2(500);
    BEGIN
        V_ID_PROVEEDOR := FN_Obtener_ID_Proveedor(V_NOMBRE_PROVEEDOR);

        IF V_ID_PROVEEDOR IS NOT NULL THEN
            UPDATE PRODUCTOS SET 
            NOMBRE = V_NOMBRE,
            PRECIO = V_PRECIO,
            DESCRIPCION = V_DESCRIPCION,
            EXISTENCIAS = V_EXISTENCIAS,
            ID_PROVEEDOR = V_ID_PROVEEDOR
            WHERE ID_PRODUCTO = V_ID_PRODUCTO;
        END IF;
        COMMIT;    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE(' *No se encontró ningún producto con el ID proporcionado* ');
        WHEN OTHERS THEN  
            VCOD := SQLCODE;
            VMENS := SQLERRM;
            DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error:' || VCOD || ' ' ||  VMENS || '* ');
    END SP_Editar_Productos;

    -- Procedimiento para eliminar productos
    PROCEDURE SP_Eliminar_Productos (ID_PRODUCTO IN NUMBER) AS
        VSQL VARCHAR2(2000);
        VCOD NUMBER;
        VMENS VARCHAR2(500);
    BEGIN
        VSQL := 'UPDATE PRODUCTOS SET ESTADO = 0
                 WHERE ID_PRODUCTO = :P1';
        EXECUTE IMMEDIATE VSQL USING ID_PRODUCTO;

    EXCEPTION
        WHEN OTHERS THEN  
            VCOD := SQLCODE;
            VMENS := SQLERRM;
            DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error:' || VCOD || ' ' ||  VMENS || '* ');
    END SP_Eliminar_Productos;

END Paquete_Inventario;


/
--------------------------------------------------------
--  DDL for Package Body PAQUETE_MEMBRESIAS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLENGUAJES_FINAL"."PAQUETE_MEMBRESIAS" AS

    -- Procedimiento para crear membresías
    PROCEDURE SP_Crear_Membresias (
        V_NOMBRE IN VARCHAR2, 
        V_PRECIO IN NUMBER, 
        V_DURACION IN NUMBER
    ) AS
        VCOD NUMBER;
        VMENS VARCHAR2(500);
    BEGIN
        INSERT INTO MEMBRESIAS (NOMBRE, PRECIO, DURACION, ESTADO)
        VALUES (V_NOMBRE, V_PRECIO, V_DURACION, 1);
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN  
            VCOD := SQLCODE;
            VMENS := SQLERRM;
            DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error al crear la membresía: ' || VCOD || ' ' || VMENS || '* ');
    END SP_Crear_Membresias;

    -- Procedimiento para visualizar membresías
    PROCEDURE SP_Visualizar_Membresias (DATOS OUT SYS_REFCURSOR) AS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT 
            M.ID_MEMBRESIA,
            M.NOMBRE,
            M.PRECIO,
            M.DURACION
            FROM MEMBRESIAS M
            WHERE M.ESTADO = 1
            ORDER BY M.ID_MEMBRESIA ASC';

        OPEN DATOS FOR VSQL;
    END SP_Visualizar_Membresias;

    -- Procedimiento para visualizar membresías por ID
    PROCEDURE SP_Visualizar_Membresias_ID (ID_MEMBRESIA IN NUMBER, DATOS OUT SYS_REFCURSOR) AS
        VSQL VARCHAR2(2000);
        VCOD NUMBER;
        VMENS VARCHAR2(500);
    BEGIN
        VSQL := 'SELECT 
            M.ID_MEMBRESIA,
            M.NOMBRE,
            M.PRECIO,
            M.DURACION
            FROM MEMBRESIAS M
            WHERE M.ID_MEMBRESIA = :P1';
        OPEN DATOS FOR VSQL USING ID_MEMBRESIA;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE(' *No se encontró ninguna membresía con el ID proporcionado* ');
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE(' *Se encontraron múltiples membresías con el ID proporcionado* ');
        WHEN OTHERS THEN  
            VCOD := SQLCODE;
            VMENS := SQLERRM;
            DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error al visualizar la membresía: ' || VCOD || ' ' || VMENS || '* ');
    END SP_Visualizar_Membresias_ID;

    -- Procedimiento para editar membresías
    PROCEDURE SP_Editar_Membresias (
        V_ID_MEMBRESIA IN NUMBER, 
        V_NOMBRE IN VARCHAR2, 
        V_PRECIO IN NUMBER, 
        V_DURACION IN NUMBER
    ) AS
        VCOD NUMBER;
        VMENS VARCHAR2(500);
    BEGIN
        UPDATE MEMBRESIAS SET 
        NOMBRE = V_NOMBRE,
        PRECIO = V_PRECIO,
        DURACION = V_DURACION
        WHERE ID_MEMBRESIA = V_ID_MEMBRESIA;
        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE(' *No se encontró ninguna membresía con el ID proporcionado* ');
        WHEN OTHERS THEN  
            VCOD := SQLCODE;
            VMENS := SQLERRM;
            DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error al editar la membresía: ' || VCOD || ' ' || VMENS || '* ');
    END SP_Editar_Membresias;

    -- Procedimiento para eliminar/desactivar membresías
    PROCEDURE SP_Eliminar_Membresias (ID_MEMBRESIA IN NUMBER) AS
        VSQL VARCHAR2(2000);
        VCOD NUMBER;
        VMENS VARCHAR2(500);
    BEGIN
        VSQL := 'UPDATE MEMBRESIAS SET ESTADO = 0
                 WHERE ID_MEMBRESIA = :P1';
        EXECUTE IMMEDIATE VSQL USING ID_MEMBRESIA;

    EXCEPTION
        WHEN OTHERS THEN  
            VCOD := SQLCODE;
            VMENS := SQLERRM;
            DBMS_OUTPUT.PUT_LINE(' *Se ha producido un error al eliminar la membresía: ' || VCOD || ' ' || VMENS || '* ');
    END SP_Eliminar_Membresias;

END Paquete_Membresias;


/
--------------------------------------------------------
--  DDL for Package Body PAQUETE_PAGOS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLENGUAJES_FINAL"."PAQUETE_PAGOS" AS

    PROCEDURE Actualizar_Pago (
        V_ID_PAGO IN NUMBER, 
        V_MONTO IN NUMBER, 
        V_FECHA_PAGO IN DATE, 
        V_METODO_PAGO IN VARCHAR2, 
        V_CONCEPTO IN VARCHAR2, 
        V_NOMBRE_CLIENTE IN VARCHAR2
    ) IS
        V_ID_CLIENTE NUMBER := Obtener_ID_Cliente(V_NOMBRE_CLIENTE);
    BEGIN
        UPDATE PAGOS SET 
        MONTO = V_MONTO,
        FECHA_PAGO = V_FECHA_PAGO,
        METODO_PAGO = V_METODO_PAGO,
        CONCEPTO = V_CONCEPTO,
        ID_CLIENTE = V_ID_CLIENTE
        WHERE ID_PAGO = V_ID_PAGO;
        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'No se encontró el cliente con el ID proporcionado.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar el pago: ' || SQLERRM);
    END Actualizar_Pago;

    PROCEDURE Eliminar_Pago (ID_PAGO IN NUMBER) IS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'DELETE FROM PAGOS WHERE ID_PAGO = :P1';
        EXECUTE IMMEDIATE VSQL USING ID_PAGO;
    END Eliminar_Pago;

    PROCEDURE Ingresar_Pago (
        V_MONTO IN NUMBER, 
        V_FECHA_PAGO IN DATE, 
        V_METODO_PAGO IN VARCHAR2, 
        V_CONCEPTO IN VARCHAR2, 
        V_NOMBRE_CLIENTE IN VARCHAR2
    ) IS
        V_ID_CLIENTE NUMBER;
    BEGIN
        SELECT ID_CLIENTE 
        INTO V_ID_CLIENTE
        FROM CLIENTES
        WHERE NOMBRE ||' '|| APELLIDO_PATERNO ||' '|| APELLIDO_MATERNO = V_NOMBRE_CLIENTE;

        INSERT INTO PAGOS (MONTO, FECHA_PAGO, METODO_PAGO, CONCEPTO, ID_CLIENTE)
        VALUES (V_MONTO, V_FECHA_PAGO, V_METODO_PAGO, V_CONCEPTO, V_ID_CLIENTE);
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-20004, 'Violación de clave única al ingresar el pago. Verifique los datos proporcionados: ' || SQLERRM);
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20005, 'Error de conversión al insertar el pago. Verifique los datos proporcionados.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20006, 'Error desconocido al ingresar el pago: ' || SQLERRM);
    END Ingresar_Pago;

    PROCEDURE Obtener_Pago_Por_ID (
        ID_PAGO IN NUMBER, 
        DATOS OUT SYS_REFCURSOR
    ) IS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT 
        P.ID_PAGO,
        P.MONTO,
        P.FECHA_PAGO,
        P.METODO_PAGO,
        P.CONCEPTO,
        C.ID_CLIENTE,
        C.NOMBRE || '' '' || C.APELLIDO_PATERNO || '' '' || C.APELLIDO_MATERNO AS Nombre_Cliente
        FROM PAGOS P
        INNER JOIN CLIENTES C ON C.ID_CLIENTE = P.ID_CLIENTE
        WHERE P.ID_PAGO = :P1';
        OPEN DATOS FOR VSQL USING ID_PAGO;
    END Obtener_Pago_Por_ID;

    PROCEDURE Obtener_Pagos (
        DATOS OUT SYS_REFCURSOR
    ) IS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT 
        P.ID_PAGO,
        P.MONTO,
        P.FECHA_PAGO,
        P.METODO_PAGO,
        P.CONCEPTO,
        C.ID_CLIENTE,
        C.NOMBRE || '' '' || C.APELLIDO_PATERNO || '' '' || C.APELLIDO_MATERNO AS Nombre_Cliente
        FROM PAGOS P
        INNER JOIN CLIENTES C ON C.ID_CLIENTE = P.ID_CLIENTE
        WHERE C.ESTADO = 1
        ORDER BY P.ID_PAGO ASC';
        OPEN DATOS FOR VSQL;
    END Obtener_Pagos;

END Paquete_Pagos;


/
--------------------------------------------------------
--  DDL for Package Body PAQUETE_PEDIDOS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLENGUAJES_FINAL"."PAQUETE_PEDIDOS" AS

    -- Procedimiento para obtener todos los pedidos
    PROCEDURE Obtener_Pedidos (DATOS OUT SYS_REFCURSOR) AS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT P.ID_PEDIDO, P.FECHA_ENTREGA, P.ESTADO, PR.NOMBRE, PP.CANTIDAD, 
                 C.NOMBRE || '' '' || C.APELLIDO_PATERNO || '' '' || C.APELLIDO_MATERNO AS CLIENTE
                 FROM PEDIDOS P
                 JOIN PEDIDOPRODUCTOS PP ON P.ID_PEDIDO = PP.ID_PEDIDO
                 JOIN PRODUCTOS PR ON PP.ID_PRODUCTO = PR.ID_PRODUCTO
                 JOIN CLIENTES C ON P.ID_CLIENTE = C.ID_CLIENTE
                 WHERE P.ACTIVO = 1
                 AND PR.ESTADO = 1
                 ORDER BY P.ID_PEDIDO ASC';
        OPEN DATOS FOR VSQL;
    END Obtener_Pedidos;

    -- Procedimiento para obtener los nombres de los productos
    PROCEDURE Obtener_Nombre_Productos (DATOS OUT SYS_REFCURSOR) AS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT ID_PRODUCTO, NOMBRE
                 FROM PRODUCTOS
                 WHERE ESTADO = 1
                 AND EXISTENCIAS > 0
                 ORDER BY ID_PRODUCTO ASC';
        OPEN DATOS FOR VSQL;
    END Obtener_Nombre_Productos;

    -- Procedimiento para obtener los nombres de los clientes
    PROCEDURE Obtener_Nombre_Clientes (DATOS OUT SYS_REFCURSOR) AS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT NOMBRE || '' '' || APELLIDO_PATERNO || '' '' || APELLIDO_MATERNO AS NOMBRE_CLIENTE
                 FROM CLIENTES
                 WHERE ESTADO = 1
                 ORDER BY ID_CLIENTE ASC';
        OPEN DATOS FOR VSQL;
    END Obtener_Nombre_Clientes;

    -- Procedimiento para obtener un pedido por ID
    PROCEDURE Obtener_Pedido_Por_ID (PID IN NUMBER, DATOS OUT SYS_REFCURSOR) AS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT P.FECHA_ENTREGA, P.ESTADO, PP.CANTIDAD, PR.NOMBRE
                 FROM PEDIDOS P
                 JOIN PEDIDOPRODUCTOS PP ON P.ID_PEDIDO = PP.ID_PEDIDO
                 JOIN PRODUCTOS PR ON PP.ID_PRODUCTO = PR.ID_PRODUCTO
                 WHERE P.ID_PEDIDO = :P1';
        OPEN DATOS FOR VSQL USING PID;
    END Obtener_Pedido_Por_ID;

    -- Procedimiento para ingresar un nuevo pedido
    PROCEDURE Ingresar_Pedido (PFECHA IN DATE, PESTADO IN VARCHAR2, PCLIENTE IN VARCHAR2, PCANTIDAD IN NUMBER, PPRODUCTO IN VARCHAR2) AS
        V_ID_CLIENTE NUMBER;
        V_ID_PRODUCTO NUMBER;
        V_ID_PEDIDO NUMBER;
    BEGIN
        SELECT ID_CLIENTE INTO V_ID_CLIENTE 
        FROM CLIENTES
        WHERE NOMBRE ||' '|| APELLIDO_PATERNO ||' '|| APELLIDO_MATERNO = PCLIENTE;

        INSERT INTO PEDIDOS(FECHA_ENTREGA, ESTADO, ID_CLIENTE)
        VALUES (PFECHA, PESTADO, V_ID_CLIENTE)
        RETURNING ID_PEDIDO INTO V_ID_PEDIDO;

        SELECT ID_PRODUCTO INTO V_ID_PRODUCTO 
        FROM PRODUCTOS
        WHERE NOMBRE = PPRODUCTO;

        INSERT INTO PEDIDOPRODUCTOS(CANTIDAD, ID_PEDIDO, ID_PRODUCTO)
        VALUES(PCANTIDAD, V_ID_PEDIDO, V_ID_PRODUCTO);

    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-20011, 'Violación de clave única al ingresar el pedido. Verifique los datos proporcionados.');
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20012, 'Error de conversión al insertar el pedido. Verifique los datos proporcionados.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20013, 'Error desconocido al ingresar el pedido: ' || SQLERRM);
    END Ingresar_Pedido;

    -- Procedimiento para actualizar un pedido
    PROCEDURE Actualizar_Pedido (PID IN NUMBER, PFECHA IN DATE, PPRODUCTO IN VARCHAR2, PESTADO IN VARCHAR2, PCANTIDAD IN NUMBER) AS
        V_ID_PRODUCTO NUMBER;
    BEGIN
        UPDATE PEDIDOS
        SET FECHA_ENTREGA = PFECHA, ESTADO = PESTADO
        WHERE ID_PEDIDO = PID;

        SELECT ID_PRODUCTO INTO V_ID_PRODUCTO
        FROM PRODUCTOS
        WHERE NOMBRE = PPRODUCTO;

        UPDATE PEDIDOPRODUCTOS
        SET CANTIDAD = PCANTIDAD, ID_PRODUCTO = V_ID_PRODUCTO
        WHERE ID_PEDIDO = PID;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'No se encontró el pedido con el ID proporcionado.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar el pedido: ' || SQLERRM); 
    END Actualizar_Pedido;

    -- Procedimiento para eliminar un pedido (cambiar estado a 0)
    PROCEDURE Eliminar_Pedido (PID IN NUMBER) AS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'UPDATE PEDIDOS SET ACTIVO = 0 WHERE ID_PEDIDO = :P1';
        EXECUTE IMMEDIATE VSQL USING PID;
    END Eliminar_Pedido;

END Paquete_Pedidos;


/
--------------------------------------------------------
--  DDL for Package Body PAQUETE_PROVEEDORES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLENGUAJES_FINAL"."PAQUETE_PROVEEDORES" AS

    -- Procedimiento para obtener todos los proveedores
    PROCEDURE Obtener_Proveedores (DATOS OUT SYS_REFCURSOR) AS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT ID_PROVEEDOR, NOMBRE, TELEFONO, DIRECCION
                 FROM PROVEEDORES
                 WHERE ESTADO = 1
                 ORDER BY ID_PROVEEDOR ASC';

        OPEN DATOS FOR VSQL;
    END Obtener_Proveedores;

    -- Procedimiento para obtener un proveedor por ID
    PROCEDURE Obtener_Proveedor_Por_ID (PID IN NUMBER, DATOS OUT SYS_REFCURSOR) AS
        VSQL VARCHAR2(2000);
    BEGIN
        VSQL := 'SELECT ID_PROVEEDOR, NOMBRE, TELEFONO, DIRECCION
                 FROM PROVEEDORES
                 WHERE ID_PROVEEDOR = :P1';
        OPEN DATOS FOR VSQL USING PID;
    END Obtener_Proveedor_Por_ID;

    -- Procedimiento para ingresar un nuevo proveedor
    PROCEDURE Ingresar_Proveedor (PNOMBRE IN VARCHAR2, PTELEFONO IN VARCHAR2, PDIRECCION IN VARCHAR2) AS
        VCOD NUMBER;
        VMENS VARCHAR2(500);
    BEGIN
        INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, DIRECCION, ESTADO)
        VALUES (PNOMBRE, PTELEFONO, PDIRECCION, 1);
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-20011, 'Violación de clave única al ingresar el proveedor. Verifique los datos proporcionados.');
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20012, 'Error de conversión al insertar el proveedor. Verifique los datos proporcionados.');
        WHEN OTHERS THEN
            VCOD := SQLCODE;
            VMENS := SQLERRM;
            RAISE_APPLICATION_ERROR(-20013, 'Error desconocido al ingresar el proveedor: ' || VMENS);
    END Ingresar_Proveedor;

    -- Procedimiento para actualizar un proveedor
    PROCEDURE Actualizar_Proveedor (PID IN NUMBER, PNOMBRE IN VARCHAR2, PTELEFONO IN VARCHAR2, PDIRECCION IN VARCHAR2) AS
        VCOD NUMBER;
        VMENS VARCHAR2(500);
    BEGIN
        UPDATE PROVEEDORES
        SET NOMBRE = PNOMBRE, TELEFONO = PTELEFONO, DIRECCION = PDIRECCION
        WHERE ID_PROVEEDOR = PID;
        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'No se encontró el proveedor con el ID proporcionado.');
        WHEN OTHERS THEN
            VCOD := SQLCODE;
            VMENS := SQLERRM;
            RAISE_APPLICATION_ERROR(-20008, 'Error desconocido al actualizar el proveedor: ' || VMENS);
    END Actualizar_Proveedor;

    -- Procedimiento para eliminar un proveedor (cambiar estado a 0)
    PROCEDURE Eliminar_Proveedor (PID IN NUMBER) AS
        VSQL VARCHAR2(2000);
        VCOD NUMBER;
        VMENS VARCHAR2(500);
    BEGIN
        VSQL := 'UPDATE PROVEEDORES SET ESTADO = 0 WHERE ID_PROVEEDOR = :P1';
        EXECUTE IMMEDIATE VSQL USING PID;
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            VCOD := SQLCODE;
            VMENS := SQLERRM;
            RAISE_APPLICATION_ERROR(-20009, 'Error desconocido al eliminar el proveedor: ' || VMENS);
    END Eliminar_Proveedor;

END Paquete_Proveedores;


/
--------------------------------------------------------
--  Constraints for Table PEDIDOPRODUCTOS
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."PEDIDOPRODUCTOS" MODIFY ("ID_PEDIDO_PRODUCTOS" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PEDIDOPRODUCTOS" MODIFY ("CANTIDAD" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PEDIDOPRODUCTOS" MODIFY ("ID_PEDIDO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PEDIDOPRODUCTOS" MODIFY ("ID_PRODUCTO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PEDIDOPRODUCTOS" ADD PRIMARY KEY ("ID_PEDIDO_PRODUCTOS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PROVEEDORES
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."PROVEEDORES" MODIFY ("ID_PROVEEDOR" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PROVEEDORES" MODIFY ("NOMBRE" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PROVEEDORES" MODIFY ("TELEFONO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PROVEEDORES" MODIFY ("DIRECCION" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PROVEEDORES" ADD PRIMARY KEY ("ID_PROVEEDOR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
  ALTER TABLE "PLENGUAJES_FINAL"."PROVEEDORES" ADD UNIQUE ("TELEFONO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
  ALTER TABLE "PLENGUAJES_FINAL"."PROVEEDORES" ADD UNIQUE ("DIRECCION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
  ALTER TABLE "PLENGUAJES_FINAL"."PROVEEDORES" MODIFY ("ESTADO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PEDIDOS
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."PEDIDOS" MODIFY ("ID_PEDIDO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PEDIDOS" MODIFY ("ID_CLIENTE" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PEDIDOS" ADD CHECK (estado IN ('Entregado', 'No entregado', 'En espera', 'En camino')) ENABLE;
  ALTER TABLE "PLENGUAJES_FINAL"."PEDIDOS" ADD PRIMARY KEY ("ID_PEDIDO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
  ALTER TABLE "PLENGUAJES_FINAL"."PEDIDOS" MODIFY ("ACTIVO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PAGOS
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."PAGOS" MODIFY ("ID_PAGO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PAGOS" MODIFY ("MONTO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PAGOS" MODIFY ("METODO_PAGO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PAGOS" MODIFY ("ID_CLIENTE" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PAGOS" ADD CHECK (metodo_pago IN ('Tarjeta', 'Efectivo')) ENABLE;
  ALTER TABLE "PLENGUAJES_FINAL"."PAGOS" ADD PRIMARY KEY ("ID_PAGO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CLASES
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."CLASES" MODIFY ("ID_CLASE" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."CLASES" MODIFY ("NOMBRE" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."CLASES" ADD PRIMARY KEY ("ID_CLASE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ENTRENADORES
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."ENTRENADORES" MODIFY ("ID_ENTRENADOR" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."ENTRENADORES" MODIFY ("NOMBRE" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."ENTRENADORES" MODIFY ("APELLIDO_PATERNO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."ENTRENADORES" MODIFY ("APELLIDO_MATERNO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."ENTRENADORES" ADD PRIMARY KEY ("ID_ENTRENADOR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
--------------------------------------------------------
--  Constraints for Table INSCRIPCIONES
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."INSCRIPCIONES" MODIFY ("ID_INSCRIPCION" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."INSCRIPCIONES" MODIFY ("FECHA_INSCRIPCION" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."INSCRIPCIONES" MODIFY ("ID_CLIENTE" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."INSCRIPCIONES" MODIFY ("ID_CLASE" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."INSCRIPCIONES" ADD PRIMARY KEY ("ID_INSCRIPCION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUDITORIA
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."AUDITORIA" MODIFY ("ID_LOG" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."AUDITORIA" ADD PRIMARY KEY ("ID_LOG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CLIENTES
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."CLIENTES" MODIFY ("ID_CLIENTE" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."CLIENTES" MODIFY ("NOMBRE" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."CLIENTES" MODIFY ("APELLIDO_PATERNO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."CLIENTES" MODIFY ("APELLIDO_MATERNO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."CLIENTES" MODIFY ("ESTADO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."CLIENTES" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."CLIENTES" MODIFY ("TELEFONO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."CLIENTES" ADD PRIMARY KEY ("ID_CLIENTE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
  ALTER TABLE "PLENGUAJES_FINAL"."CLIENTES" ADD UNIQUE ("EMAIL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
  ALTER TABLE "PLENGUAJES_FINAL"."CLIENTES" ADD UNIQUE ("TELEFONO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
  ALTER TABLE "PLENGUAJES_FINAL"."CLIENTES" MODIFY ("EDAD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MEMBRESIAS
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."MEMBRESIAS" MODIFY ("ID_MEMBRESIA" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."MEMBRESIAS" MODIFY ("NOMBRE" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."MEMBRESIAS" MODIFY ("PRECIO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."MEMBRESIAS" MODIFY ("DURACION" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."MEMBRESIAS" ADD PRIMARY KEY ("ID_MEMBRESIA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
  ALTER TABLE "PLENGUAJES_FINAL"."MEMBRESIAS" MODIFY ("ESTADO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EVALUACIONES
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."EVALUACIONES" MODIFY ("ID_EVALUACION" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."EVALUACIONES" MODIFY ("PESO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."EVALUACIONES" MODIFY ("GRASA_CORPORAL" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."EVALUACIONES" MODIFY ("MASA_MUSCULAR" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."EVALUACIONES" MODIFY ("FECHA_EVALUACION" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."EVALUACIONES" MODIFY ("ID_CLIENTE" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."EVALUACIONES" ADD PRIMARY KEY ("ID_EVALUACION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRODUCTOS
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."PRODUCTOS" MODIFY ("ID_PRODUCTO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PRODUCTOS" MODIFY ("NOMBRE" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PRODUCTOS" MODIFY ("PRECIO" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PRODUCTOS" MODIFY ("EXISTENCIAS" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PRODUCTOS" MODIFY ("ID_PROVEEDOR" NOT NULL ENABLE);
  ALTER TABLE "PLENGUAJES_FINAL"."PRODUCTOS" ADD PRIMARY KEY ("ID_PRODUCTO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PL_TABLESPACE_FINAL"  ENABLE;
  ALTER TABLE "PLENGUAJES_FINAL"."PRODUCTOS" MODIFY ("ESTADO" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table CLASES
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."CLASES" ADD CONSTRAINT "FK_CLASE_ENTRENADOR" FOREIGN KEY ("ID_ENTRENADOR")
	  REFERENCES "PLENGUAJES_FINAL"."ENTRENADORES" ("ID_ENTRENADOR") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CLIENTES
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."CLIENTES" ADD CONSTRAINT "FK_CLIENTE_MEMBRESIA" FOREIGN KEY ("ID_MEMBRESIA")
	  REFERENCES "PLENGUAJES_FINAL"."MEMBRESIAS" ("ID_MEMBRESIA") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EVALUACIONES
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."EVALUACIONES" ADD CONSTRAINT "FK_EVALUACION_CLIENTE" FOREIGN KEY ("ID_CLIENTE")
	  REFERENCES "PLENGUAJES_FINAL"."CLIENTES" ("ID_CLIENTE") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table INSCRIPCIONES
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."INSCRIPCIONES" ADD CONSTRAINT "FK_INSCRIPCION_CLIENTE" FOREIGN KEY ("ID_CLIENTE")
	  REFERENCES "PLENGUAJES_FINAL"."CLIENTES" ("ID_CLIENTE") ENABLE;
  ALTER TABLE "PLENGUAJES_FINAL"."INSCRIPCIONES" ADD CONSTRAINT "FK_INSCRIPCION_CLASE" FOREIGN KEY ("ID_CLASE")
	  REFERENCES "PLENGUAJES_FINAL"."CLASES" ("ID_CLASE") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PAGOS
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."PAGOS" ADD CONSTRAINT "FK_PAGO_CLIENTE" FOREIGN KEY ("ID_CLIENTE")
	  REFERENCES "PLENGUAJES_FINAL"."CLIENTES" ("ID_CLIENTE") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PEDIDOPRODUCTOS
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."PEDIDOPRODUCTOS" ADD CONSTRAINT "FK_PEDIDOPRODUCTO_PEDIDO" FOREIGN KEY ("ID_PEDIDO")
	  REFERENCES "PLENGUAJES_FINAL"."PEDIDOS" ("ID_PEDIDO") ENABLE;
  ALTER TABLE "PLENGUAJES_FINAL"."PEDIDOPRODUCTOS" ADD CONSTRAINT "FK_PEDIDOPRODUCTO_PRODUCTO" FOREIGN KEY ("ID_PRODUCTO")
	  REFERENCES "PLENGUAJES_FINAL"."PRODUCTOS" ("ID_PRODUCTO") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PEDIDOS
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."PEDIDOS" ADD CONSTRAINT "FK_PEDIDO_CLIENTE" FOREIGN KEY ("ID_CLIENTE")
	  REFERENCES "PLENGUAJES_FINAL"."CLIENTES" ("ID_CLIENTE") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUCTOS
--------------------------------------------------------

  ALTER TABLE "PLENGUAJES_FINAL"."PRODUCTOS" ADD CONSTRAINT "FK_PRODUCTO_PROVEEDOR" FOREIGN KEY ("ID_PROVEEDOR")
	  REFERENCES "PLENGUAJES_FINAL"."PROVEEDORES" ("ID_PROVEEDOR") ENABLE;
--------------------------------------------------------
--  INSERT Datos de Prueba
-------------------------------------------------------- 

-- Membresias
INSERT INTO PLENGUAJES_FINAL.Membresias (nombre, precio, duracion) VALUES ('Mensual', 29.99, 30);

INSERT INTO PLENGUAJES_FINAL.Membresias (nombre, precio, duracion) VALUES ('Trimestral', 82.50, 90);

INSERT INTO PLENGUAJES_FINAL.Membresias (nombre, precio, duracion) VALUES ('Anual', 330.00, 365);

-- Clientes
INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Juan', 'Pérez', 'García', 20, 'juan.perez@gmail.com', '5551234567', 1);

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('María', 'López', 'Martínez', 30, 'maria.lopez@gmail.com', '5557654321', 2);

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Luis', 'Martínez', 'Núñez', 40, 'luis.martinez@gmail.com', '5553456789', 3); -- Mensual

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Lucía', 'Ortiz', 'López', 28, 'lucia.ortiz@gmail.com', '5559876543', 1); -- Mensual

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Ricardo', 'Santos', 'Díaz', 45, 'ricardo.santos@gmail.com', '5556543210', 2); -- Mensual

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Laura', 'Castro', 'Hernández', 32, 'laura.castro@gmail.com', '5554321098', 3); -- Mensual

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Mario', 'Ramírez', 'Torres', 50, 'mario.ramirez@gmail.com', '5552109876', 1); -- Trimestral

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Carmen', 'Vega', 'Morales', 38, 'carmen.vega@gmail.com', '5558765432', 2); -- Trimestral

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Eduardo', 'Luna', 'Reyes', 27, 'eduardo.luna@gmail.com', '5557554321', 3); -- Trimestral

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Sara', 'Cruz', 'Flores', 29, 'sara.cruz@gmail.com', '5551234667', 1); -- Trimestral

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Andrés', 'Mendoza', 'García', 31, 'andres.mendoza@gmail.com', '5557876543', 2); -- Trimestral

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Gabriela', 'Moreno', 'Jiménez', 33, 'gabriela.moreno@gmail.com', '5553459789', 3); -- Trimestral

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Manuel', 'Paredes', 'Ruiz', 26, 'manuel.paredes@gmail.com', '5556543219', 1); -- Anual

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Sofía', 'Quintana', 'Vargas', 34, 'sofia.quintana@gmail.com', '5554321099', 2); -- Anual

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Jorge', 'Silva', 'Gómez', 37, 'jorge.silva@gmail.com', '5552109879', 3); -- Anual

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Isabel', 'Cárdenas', 'Romero', 42, 'isabel.cardenas@gmail.com', '5551234569', 1); -- Anual

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('David', 'Hernández', 'Aguilar', 39, 'david.hernandez@gmail.com', '5559876593', 2); -- Anual

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Paola', 'Sánchez', 'Molina', 44, 'paola.sanchez@gmail.com', '5553456799', 3); -- Anual

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Raúl', 'Ríos', 'Serrano', 48, 'raul.rios@gmail.com', '55565499219', 1); -- Anual

INSERT INTO PLENGUAJES_FINAL.Clientes (nombre, apellido_paterno, apellido_materno, edad, email, telefono, id_membresia)
VALUES ('Alejandra', 'Acosta', 'Soto', 52, 'alejandra.acosta@gmail.com', '5954321098', 2); -- Anual

-- Pagos
INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (1, TO_DATE('15-JUN-24', 'DD-MON-RR'), 29.99, 'Tarjeta', 'Pago mensualidad'); -- Mensual

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (2, TO_DATE('16-JUN-24', 'DD-MON-RR'), 29.99, 'Tarjeta', 'Pago mensualidad'); -- Mensual

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (3, TO_DATE('17-JUN-24', 'DD-MON-RR'), 29.99, 'Efectivo', 'Pago mensualidad'); -- Mensual

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (4, TO_DATE('18-JUN-24', 'DD-MON-RR'), 29.99, 'Efectivo', 'Pago mensualidad'); -- Mensual

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (5, TO_DATE('19-JUN-24', 'DD-MON-RR'), 29.99, 'Tarjeta', 'Pago mensualidad'); -- Mensual

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (6, TO_DATE('20-JUN-24', 'DD-MON-RR'), 29.99, 'Efectivo', 'Pago mensualidad'); -- Mensual

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (7, TO_DATE('01-JUL-24', 'DD-MON-RR'), 82.50, 'Tarjeta', 'Pago trimestral'); -- Trimestral

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (8, TO_DATE('02-JUL-24', 'DD-MON-RR'), 82.50, 'Tarjeta', 'Pago trimestral'); -- Trimestral

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (9, TO_DATE('03-JUL-24', 'DD-MON-RR'), 82.50, 'Efectivo', 'Pago trimestral'); -- Trimestral

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (10, TO_DATE('04-JUL-24', 'DD-MON-RR'), 82.50, 'Efectivo', 'Pago trimestral'); -- Trimestral

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (11, TO_DATE('05-JUL-24', 'DD-MON-RR'), 82.50, 'Tarjeta', 'Pago trimestral'); -- Trimestral

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (12, TO_DATE('06-JUL-24', 'DD-MON-RR'), 82.50, 'Tarjeta', 'Pago trimestral'); -- Trimestral

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (13, TO_DATE('07-JUL-24', 'DD-MON-RR'), 330.00, 'Tarjeta', 'Pago anualidad'); -- Anual

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (14, TO_DATE('08-JUL-24', 'DD-MON-RR'), 330.00, 'Tarjeta', 'Pago anualidad'); -- Anual

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (15, TO_DATE('09-JUL-24', 'DD-MON-RR'), 330.00, 'Efectivo', 'Pago anualidad'); -- Anual

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (16, TO_DATE('10-JUL-24', 'DD-MON-RR'), 330.00, 'Efectivo', 'Pago anualidad'); -- Anual

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (17, TO_DATE('11-JUL-24', 'DD-MON-RR'), 330.00, 'Tarjeta', 'Pago anualidad'); -- Anual

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (18, TO_DATE('12-JUL-24', 'DD-MON-RR'), 330.00, 'Tarjeta', 'Pago anualidad'); -- Anual

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (19, TO_DATE('13-JUL-24', 'DD-MON-RR'), 330.00, 'Efectivo', 'Pago anualidad'); -- Anual

INSERT INTO PLENGUAJES_FINAL.Pagos (id_cliente, fecha_pago, monto, metodo_pago, concepto)
VALUES (20, TO_DATE('14-JUL-24', 'DD-MON-RR'), 330.00, 'Efectivo', 'Pago anualidad'); -- Anual

-- Evaluaciones
INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (70.0, 19.0, 30.0, TO_DATE('25-AUG-24', 'DD-MON-RR'), 1);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (75.5, 22.3, 32.0, TO_DATE('26-AUG-24', 'DD-MON-RR'), 2);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (82.0, 25.5, 34.5, TO_DATE('27-AUG-24', 'DD-MON-RR'), 3);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (69.0, 18.8, 29.5, TO_DATE('28-AUG-24', 'DD-MON-RR'), 4);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (77.0, 22.0, 31.8, TO_DATE('29-AUG-24', 'DD-MON-RR'), 5);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (78.0, 23.2, 32.5, TO_DATE('30-AUG-24', 'DD-MON-RR'), 6);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (76.0, 22.0, 33.0, TO_DATE('11-AUG-24', 'DD-MON-RR'), 7);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (68.5, 18.9, 29.5, TO_DATE('12-AUG-24', 'DD-MON-RR'), 8);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (73.0, 21.2, 31.5, TO_DATE('13-AUG-24', 'DD-MON-RR'), 9);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (81.0, 24.5, 34.0, TO_DATE('14-AUG-24', 'DD-MON-RR'), 10);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (67.5, 19.3, 28.7, TO_DATE('15-AUG-24', 'DD-MON-RR'), 11);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (74.5, 20.8, 32.3, TO_DATE('16-AUG-24', 'DD-MON-RR'), 12);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (79.0, 23.7, 33.5, TO_DATE('17-AUG-24', 'DD-MON-RR'), 13);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (66.8, 18.6, 29.0, TO_DATE('18-AUG-24', 'DD-MON-RR'), 14);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (72.0, 20.5, 31.0, TO_DATE('19-AUG-24', 'DD-MON-RR'), 15);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (80.0, 24.0, 34.2, TO_DATE('20-AUG-24', 'DD-MON-RR'), 16);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (65.0, 17.5, 27.0, TO_DATE('21-AUG-24', 'DD-MON-RR'), 17);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (77.5, 23.0, 32.7, TO_DATE('22-AUG-24', 'DD-MON-RR'), 18);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (69.5, 19.8, 30.3, TO_DATE('23-AUG-24', 'DD-MON-RR'), 19);

INSERT INTO PLENGUAJES_FINAL.Evaluaciones (peso, grasa_corporal, masa_muscular, fecha_evaluacion, id_cliente)
VALUES (83.0, 26.0, 35.5, TO_DATE('24-AUG-24', 'DD-MON-RR'), 20);

-- Entrenadores
INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Javier', 'López', 'Pérez', 'Cardio');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Marta', 'García', 'Rodríguez', 'Crossfit');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('David', 'Martín', 'Hernández', 'Funcional');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Elena', 'Sánchez', 'Gómez', 'Zumba');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Fernando', 'Romero', 'Vega', 'Pilates');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Gloria', 'Jiménez', 'Mora', 'Spinning');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Sergio', 'Ruiz', 'Castro', 'HIIT');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Laura', 'Díaz', 'López', 'Yoga');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Ricardo', 'Méndez', 'Rojas', 'Boxeo');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Raquel', 'Ortega', 'Núñez', 'Aeróbicos');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Antonio', 'Castillo', 'Morales', 'Musculación');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Beatriz', 'Pérez', 'Ramírez', 'Ciclismo');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Carlos', 'Molina', 'Martínez', 'Natación');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Sara', 'Cruz', 'Ortiz', 'Kickboxing');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Luis', 'Moreno', 'Hernández', 'Stretching');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Isabel', 'González', 'Pérez', 'Artes Marciales');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Jorge', 'Santos', 'Hidalgo', 'Powerlifting');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Patricia', 'Gutiérrez', 'Rodríguez', 'Step');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('José', 'Flores', 'Pérez', 'Aquaeróbicos');

INSERT INTO PLENGUAJES_FINAL.Entrenadores (nombre, apellido_paterno, apellido_materno, especialidad)
VALUES ('Teresa', 'Navarro', 'Gómez', 'Meditación');

-- Clases
INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Cardio', 'Clase de Cardio', 20, '08:00 - 09:00', 1);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Crossfit', 'Entrenamiento de Crossfit', 25, '09:00 - 10:00', 2);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Funcional', 'Clase de entrenamiento funcional', 15, '10:00 - 11:00', 3);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Zumba', 'Clase de Zumba', 18, '11:00 - 12:00', 4);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Pilates', 'Clase de Pilates', 12, '12:00 - 13:00', 5);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Spinning', 'Clase de Spinning', 22, '13:00 - 14:00', 5);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('HIIT', 'Entrenamiento HIIT', 20, '14:00 - 15:00', 6);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Yoga', 'Clase de Yoga', 15, '15:00 - 16:00', 7);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Boxeo', 'Clase de Boxeo', 10, '16:00 - 17:00', 8);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Aeróbicos', 'Clase de Aeróbicos', 25, '17:00 - 18:00', 9);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Musculación', 'Clase de Musculación', 20, '18:00 - 19:00', 10);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Ciclismo', 'Clase de Ciclismo', 20, '19:00 - 20:00', 11);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Natación', 'Clase de Natación', 12, '20:00 - 21:00', 12);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Kickboxing', 'Clase de Kickboxing', 15, '21:00 - 22:00', 13);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Stretching', 'Clase de Stretching', 18, '22:00 - 23:00', 14);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Artes Marciales', 'Clase de Artes Marciales', 20, '07:00 - 08:00', 15);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Powerlifting', 'Clase de Powerlifting', 15, '08:00 - 09:00', 16);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Step', 'Clase de Step', 20, '09:00 - 10:00', 17);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Aquaeróbicos', 'Clase de Aquaeróbicos', 12, '10:00 - 11:00', 18);

INSERT INTO PLENGUAJES_FINAL.Clases (nombre, descripcion, capacidad, horario, id_entrenador)
VALUES ('Yoga', 'Clase de Yoga para principiantes', 15, '17:00 - 18:00', 19);

-- Inscripciones
INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('01-AUG-24', 'DD-MON-RR'), 1, 1);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('02-AUG-24', 'DD-MON-RR'), 2, 2);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('03-AUG-24', 'DD-MON-RR'), 3, 3);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('04-AUG-24', 'DD-MON-RR'), 4, 4);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('05-AUG-24', 'DD-MON-RR'), 5, 5);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('06-AUG-24', 'DD-MON-RR'), 6, 6);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('07-AUG-24', 'DD-MON-RR'), 7, 7);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('08-AUG-24', 'DD-MON-RR'), 5, 8);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('09-AUG-24', 'DD-MON-RR'), 9, 9);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('10-AUG-24', 'DD-MON-RR'), 5, 2);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('11-AUG-24', 'DD-MON-RR'), 3, 8);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('12-AUG-24', 'DD-MON-RR'), 5, 8);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('13-AUG-24', 'DD-MON-RR'), 3, 2);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('14-AUG-24', 'DD-MON-RR'), 14, 2);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('15-AUG-24', 'DD-MON-RR'), 5, 2);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('16-AUG-24', 'DD-MON-RR'), 3, 4);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('17-AUG-24', 'DD-MON-RR'), 3, 4);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('18-AUG-24', 'DD-MON-RR'), 2, 2);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('19-AUG-24', 'DD-MON-RR'), 2, 4);

INSERT INTO PLENGUAJES_FINAL.Inscripciones (fecha_inscripcion, id_cliente, id_clase)
VALUES (TO_DATE('20-AUG-24', 'DD-MON-RR'), 3, 2);

-- Proveedores
INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('Suplementos XYZ', '2222-3333', 'San José, Costa Rica');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('Equipos Fit', '2222-4444', 'Alajuela, Costa Rica');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('Ropa Deportiva ABC', '2222-5555', 'Heredia, Costa Rica');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('Healthy Foods', '2222-6666', 'Cartago, Costa Rica');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('Muscle Gain', '2222-7777', 'Puntarenas, Costa Rica');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('Wellness Store', '2222-8588', 'Puerto, Costa Rica');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('Gym Equipos SA', '2222-9999', 'San José, Costa Rica, Barrio La California');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('NutriVida', '2223-0000', 'Alajuela, Costa Rica, Barrio Los Ángeles');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('BioSport', '2223-1111', 'Heredia, Costa Rica, Santa Lucía');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('Force Fitness', '2223-2222', 'Cartago, Costa Rica, Barrio San Francisco');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('BodyTech', '2223-3333', 'Puntarenas, Costa Rica, Barrio El Carmen');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('Salud y Más', '2223-4444', 'Limón, Costa Rica, Barrio Los Ángeles');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('ProGym', '2223-5555', 'San José, Costa Rica, Barrio Escalante');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('VitaSport', '2223-6666', 'Alajuela, Costa Rica, Barrio El Prado');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('FitPlus', '2223-7777', 'Heredia, Costa Rica, San Francisco');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('NaturalFit', '2223-8888', 'Cartago, Costa Rica, Barrio El Carmen');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('MaxEnergy', '2223-9999', 'Puntarenas, Costa Rica, Barrio La Aurora');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('SuperGym', '2224-0000', 'Limón, Costa Rica, Barrio La Unión');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('GymMaster', '2224-1111', 'San José, Costa Rica, Barrio La Sabana');

INSERT INTO PLENGUAJES_FINAL.Proveedores (nombre, telefono, direccion)
VALUES ('VitaSalud', '2224-2222', 'Alajuela, Costa Rica, Barrio Los Rosales');

-- Productos
INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Proteína Whey', 'Proteína en polvo de suero de leche', 25000, 100, 1);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Creatina Monohidratada', 'Suplemento para aumento de fuerza', 15000, 150, 2);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Multivitamínico', 'Vitaminas y minerales esenciales', 12000, 200, 3);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Aminoácidos BCAA', 'Suplemento para recuperación muscular', 20000, 80, 4);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Barra de proteína', 'Snack saludable para deportistas', 3000, 300, 5);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Barras paralelas', 'Equipo para ejercicios de peso corporal', 45000, 20, 6);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Colchoneta de yoga', 'Colchoneta antideslizante para yoga', 10000, 150, 6);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Kettlebell', 'Pesa rusa de 10 kg', 15000, 40, 4);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Cuerda para saltar', 'Cuerda de velocidad para saltos', 5000, 250, 4);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Pelota de pilates', 'Pelota inflable para ejercicios de estabilidad', 10000, 120, 3);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Camiseta deportiva', 'Camiseta de entrenamiento transpirable', 12000, 200, 2);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Shorts deportivos', 'Pantalones cortos de entrenamiento', 15000, 180, 4);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Cinturón de levantamiento', 'Cinturón para levantamiento de pesas', 25000, 70, 2);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Suplemento Pre-Workout', 'Suplemento para energía antes del entrenamiento', 18000, 90, 2);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Guantes de entrenamiento', 'Guantes para protección durante el levantamiento de pesas', 8000, 100, 5);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Bandas de resistencia', 'Bandas para ejercicios de resistencia', 7000, 150, 3);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Mancuernas ajustables', 'Mancuernas con peso ajustable', 60000, 25, 6);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Bicicleta estática', 'Bicicleta para ejercicios cardiovasculares', 200000, 10, 1);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Reloj deportivo', 'Reloj con monitor de frecuencia cardíaca', 35000, 40, 2);

INSERT INTO PLENGUAJES_FINAL.Productos (nombre, descripcion, precio, existencias, id_proveedor)
VALUES ('Ropa de compresión', 'Ropa para mejorar la circulación y rendimiento', 22000, 70, 4);

-- Pedidos
INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('05-AUG-24', 'DD-MON-RR'), 'Entregado', 1);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('06-AUG-24', 'DD-MON-RR'), 'En camino', 2);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('07-AUG-24', 'DD-MON-RR'), 'Entregado', 3);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('09-AUG-24', 'DD-MON-RR'), 'Entregado', 5);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('10-AUG-24', 'DD-MON-RR'), 'En camino', 6);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('12-AUG-24', 'DD-MON-RR'), 'Entregado', 8);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('13-AUG-24', 'DD-MON-RR'), 'En camino', 9);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('15-AUG-24', 'DD-MON-RR'), 'Entregado', 11);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('16-AUG-24', 'DD-MON-RR'), 'En camino', 12);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('18-AUG-24', 'DD-MON-RR'), 'Entregado', 14);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('19-AUG-24', 'DD-MON-RR'), 'En camino', 15);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('21-AUG-24', 'DD-MON-RR'), 'Entregado', 17);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('22-AUG-24', 'DD-MON-RR'), 'En camino', 18);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('24-AUG-24', 'DD-MON-RR'), 'Entregado', 20);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('24-JAN-24', 'DD-MON-RR'), 'Entregado', 2);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('24-APR-24', 'DD-MON-RR'), 'Entregado', 3);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('25-JUN-24', 'DD-MON-RR'), 'Entregado', 3);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('20-JUL-24', 'DD-MON-RR'), 'Entregado', 3);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('20-MAR-24', 'DD-MON-RR'), 'Entregado', 9);

INSERT INTO PLENGUAJES_FINAL.Pedidos (fecha_entrega, estado, id_cliente)
VALUES (TO_DATE('09-APR-24', 'DD-MON-RR'), 'Entregado', 9);

-- PedidoProductos
INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (1, 1, 1);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (2, 2, 1);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (3, 3, 1);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (4, 4, 1);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (5, 5, 1);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (6, 6, 1);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (7, 7, 1);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (8, 8, 2);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (9, 9, 2);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (10, 10, 3);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (11, 11, 1);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (12, 12, 2);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (13, 1, 2);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (14, 2, 3);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (15, 3, 1);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (16, 4, 2);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (17, 5, 4);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (18, 6, 1);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (19, 7, 2);

INSERT INTO PLENGUAJES_FINAL.PedidoProductos (id_pedido, id_producto, cantidad)
VALUES (20, 8, 3);
--------------------------------------------------------
--  Reset de la Tabla de Auditoría
-------------------------------------------------------- 

TRUNCATE TABLE PLENGUAJES_FINAL.Auditoria;

ALTER TABLE PLENGUAJES_FINAL.Auditoria MODIFY id_log 
NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1);

COMMIT;